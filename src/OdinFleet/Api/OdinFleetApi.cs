/*
 * ODIN Fleet API
 *
 * API to access Odin Fleet, empowering developers to deploy gameservers all around the world in just a few lines of code.
 *
 * The version of the OpenAPI document: 0.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using OdinFleet.Client;
using OdinFleet.Model;

namespace OdinFleet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOdinFleetApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an app
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAppRequest"> (optional)</param>
        /// <returns>App</returns>
        App CreateApp(CreateAppRequest createAppRequest = default(CreateAppRequest));

        /// <summary>
        /// Create an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAppRequest"> (optional)</param>
        /// <returns>ApiResponse of App</returns>
        ApiResponse<App> CreateAppWithHttpInfo(CreateAppRequest createAppRequest = default(CreateAppRequest));
        /// <summary>
        /// Create a new location setting
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createAppLocationSettingRequest"> (optional)</param>
        /// <returns>AppLocationSetting</returns>
        AppLocationSetting CreateAppLocationSetting(int app, CreateAppLocationSettingRequest createAppLocationSettingRequest = default(CreateAppLocationSettingRequest));

        /// <summary>
        /// Create a new location setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createAppLocationSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of AppLocationSetting</returns>
        ApiResponse<AppLocationSetting> CreateAppLocationSettingWithHttpInfo(int app, CreateAppLocationSettingRequest createAppLocationSettingRequest = default(CreateAppLocationSettingRequest));
        /// <summary>
        /// Creates a backup of the service
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="createBackupRequest"> (optional)</param>
        /// <returns>Object</returns>
        Object CreateBackup(int service, CreateBackupRequest createBackupRequest = default(CreateBackupRequest));

        /// <summary>
        /// Creates a backup of the service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="createBackupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateBackupWithHttpInfo(int service, CreateBackupRequest createBackupRequest = default(CreateBackupRequest));
        /// <summary>
        /// Create a binary and the related file
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createBinaryRequest"> (optional)</param>
        /// <returns>Binary</returns>
        Binary CreateBinary(int app, CreateBinaryRequest createBinaryRequest = default(CreateBinaryRequest));

        /// <summary>
        /// Create a binary and the related file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createBinaryRequest"> (optional)</param>
        /// <returns>ApiResponse of Binary</returns>
        ApiResponse<Binary> CreateBinaryWithHttpInfo(int app, CreateBinaryRequest createBinaryRequest = default(CreateBinaryRequest));
        /// <summary>
        /// Create a new docker registry
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDockerRegistryRequest"> (optional)</param>
        /// <returns>DockerRegistry</returns>
        DockerRegistry CreateDockerRegistry(CreateDockerRegistryRequest createDockerRegistryRequest = default(CreateDockerRegistryRequest));

        /// <summary>
        /// Create a new docker registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDockerRegistryRequest"> (optional)</param>
        /// <returns>ApiResponse of DockerRegistry</returns>
        ApiResponse<DockerRegistry> CreateDockerRegistryWithHttpInfo(CreateDockerRegistryRequest createDockerRegistryRequest = default(CreateDockerRegistryRequest));
        /// <summary>
        /// Create a new server config
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createServerConfigRequest"> (optional)</param>
        /// <returns>ServerConfig</returns>
        ServerConfig CreateServerConfig(int app, CreateServerConfigRequest createServerConfigRequest = default(CreateServerConfigRequest));

        /// <summary>
        /// Create a new server config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createServerConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of ServerConfig</returns>
        ApiResponse<ServerConfig> CreateServerConfigWithHttpInfo(int app, CreateServerConfigRequest createServerConfigRequest = default(CreateServerConfigRequest));
        /// <summary>
        /// Delete a specific app
        /// </summary>
        /// <remarks>
        /// This method is responsible for deleting an App record from the database. It locates the App instance using the provided ID, and if found, proceeds to delete it. Upon successful deletion, an HTTP 204 No Content response is returned, indicating that the action was successful.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>Object</returns>
        Object DeleteApp(int app);

        /// <summary>
        /// Delete a specific app
        /// </summary>
        /// <remarks>
        /// This method is responsible for deleting an App record from the database. It locates the App instance using the provided ID, and if found, proceeds to delete it. Upon successful deletion, an HTTP 204 No Content response is returned, indicating that the action was successful.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteAppWithHttpInfo(int app);
        /// <summary>
        /// Delete a location setting
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appLocationSetting">The app location setting ID</param>
        /// <returns>Object</returns>
        Object DeleteAppLocationSetting(int appLocationSetting);

        /// <summary>
        /// Delete a location setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appLocationSetting">The app location setting ID</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteAppLocationSettingWithHttpInfo(int appLocationSetting);
        /// <summary>
        /// Handles the deletion of a user&#39;s authentication tokens
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sid">The session id of the user</param>
        /// <returns>Object</returns>
        Object DeleteAuthToken(string sid);

        /// <summary>
        /// Handles the deletion of a user&#39;s authentication tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sid">The session id of the user</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteAuthTokenWithHttpInfo(string sid);
        /// <summary>
        /// Delete a specified binary
        /// </summary>
        /// <remarks>
        /// It first finds the Binary instance by its ID. If the instance is found, it is deleted. The method then returns an HTTP 204 No Content response to indicate successful deletion.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <returns>Object</returns>
        Object DeleteBinary(int binary);

        /// <summary>
        /// Delete a specified binary
        /// </summary>
        /// <remarks>
        /// It first finds the Binary instance by its ID. If the instance is found, it is deleted. The method then returns an HTTP 204 No Content response to indicate successful deletion.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteBinaryWithHttpInfo(int binary);
        /// <summary>
        /// Delete a specific docker registry
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <returns>Object</returns>
        Object DeleteDockerRegistry(int dockerRegistry);

        /// <summary>
        /// Delete a specific docker registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteDockerRegistryWithHttpInfo(int dockerRegistry);
        /// <summary>
        /// Delete a specific server config
        /// </summary>
        /// <remarks>
        /// This method handles the deletion of a ServerConfig record from the database. It first finds the ServerConfig instance by its ID, and if found, deletes it. Returns an HTTP 204 No Content response upon successful deletion.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <returns>Object</returns>
        Object DeleteServerConfig(int serverConfig);

        /// <summary>
        /// Delete a specific server config
        /// </summary>
        /// <remarks>
        /// This method handles the deletion of a ServerConfig record from the database. It first finds the ServerConfig instance by its ID, and if found, deletes it. Returns an HTTP 204 No Content response upon successful deletion.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteServerConfigWithHttpInfo(int serverConfig);
        /// <summary>
        /// Show a specific app
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>App</returns>
        App GetAppById(int app);

        /// <summary>
        /// Show a specific app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>ApiResponse of App</returns>
        ApiResponse<App> GetAppByIdWithHttpInfo(int app);
        /// <summary>
        /// Show all location settings
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>List&lt;AppLocationSetting&gt;</returns>
        List<AppLocationSetting> GetAppLocationSettings(int app);

        /// <summary>
        /// Show all location settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>ApiResponse of List&lt;AppLocationSetting&gt;</returns>
        ApiResponse<List<AppLocationSetting>> GetAppLocationSettingsWithHttpInfo(int app);
        /// <summary>
        /// Show all apps
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;App&gt;</returns>
        List<App> GetApps();

        /// <summary>
        /// Show all apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;App&gt;</returns>
        ApiResponse<List<App>> GetAppsWithHttpInfo();
        /// <summary>
        /// Handles user authentication
        /// </summary>
        /// <remarks>
        /// Validates the incoming request and attempts to authenticate the user based on the provided session ID. If the user is authenticated successfully, it returns an AuthResource containing the user&#39;s bearer token.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAuthTokenRequest"> (optional)</param>
        /// <returns>Auth</returns>
        Auth GetAuthToken(GetAuthTokenRequest getAuthTokenRequest = default(GetAuthTokenRequest));

        /// <summary>
        /// Handles user authentication
        /// </summary>
        /// <remarks>
        /// Validates the incoming request and attempts to authenticate the user based on the provided session ID. If the user is authenticated successfully, it returns an AuthResource containing the user&#39;s bearer token.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAuthTokenRequest"> (optional)</param>
        /// <returns>ApiResponse of Auth</returns>
        ApiResponse<Auth> GetAuthTokenWithHttpInfo(GetAuthTokenRequest getAuthTokenRequest = default(GetAuthTokenRequest));
        /// <summary>
        /// List all backups for the specified Docker service
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <returns>List&lt;Backup&gt;</returns>
        List<Backup> GetBackups(int service);

        /// <summary>
        /// List all backups for the specified Docker service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <returns>ApiResponse of List&lt;Backup&gt;</returns>
        ApiResponse<List<Backup>> GetBackupsWithHttpInfo(int service);
        /// <summary>
        /// Show all binaries
        /// </summary>
        /// <remarks>
        /// Eager load file types and config templates to reduce the number of queries.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>List&lt;Binary&gt;</returns>
        List<Binary> GetBinaries(int app);

        /// <summary>
        /// Show all binaries
        /// </summary>
        /// <remarks>
        /// Eager load file types and config templates to reduce the number of queries.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>ApiResponse of List&lt;Binary&gt;</returns>
        ApiResponse<List<Binary>> GetBinariesWithHttpInfo(int app);
        /// <summary>
        /// Show a specific binary
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <returns>Binary</returns>
        Binary GetBinaryById(int binary);

        /// <summary>
        /// Show a specific binary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <returns>ApiResponse of Binary</returns>
        ApiResponse<Binary> GetBinaryByIdWithHttpInfo(int binary);
        /// <summary>
        /// Show all docker registries
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DockerRegistry&gt;</returns>
        List<DockerRegistry> GetDockerRegistries();

        /// <summary>
        /// Show all docker registries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DockerRegistry&gt;</returns>
        ApiResponse<List<DockerRegistry>> GetDockerRegistriesWithHttpInfo();
        /// <summary>
        /// Display a specific docker registry
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <returns>DockerRegistry</returns>
        DockerRegistry GetDockerRegistryById(int dockerRegistry);

        /// <summary>
        /// Display a specific docker registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <returns>ApiResponse of DockerRegistry</returns>
        ApiResponse<DockerRegistry> GetDockerRegistryByIdWithHttpInfo(int dockerRegistry);
        /// <summary>
        /// Show a unique listing of locations based on active and ready worker nodes
        /// </summary>
        /// <remarks>
        /// Synchronizes the local database with the state of Docker nodes, then filters for active, ready worker nodes to create a unique listing of their location labels. These nodes are suitable for deployment.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Location&gt;</returns>
        List<Location> GetLocations();

        /// <summary>
        /// Show a unique listing of locations based on active and ready worker nodes
        /// </summary>
        /// <remarks>
        /// Synchronizes the local database with the state of Docker nodes, then filters for active, ready worker nodes to create a unique listing of their location labels. These nodes are suitable for deployment.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Location&gt;</returns>
        ApiResponse<List<Location>> GetLocationsWithHttpInfo();
        /// <summary>
        /// Display the most recent backup for the specified Docker service
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <returns>Backup</returns>
        Backup GetMostRecentBackup(int service);

        /// <summary>
        /// Display the most recent backup for the specified Docker service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <returns>ApiResponse of Backup</returns>
        ApiResponse<Backup> GetMostRecentBackupWithHttpInfo(int service);
        /// <summary>
        /// Generates a presigned URL for downloading a backup from AWS S3 if the backup method is &#39;archive&#39;
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <returns>BackupDownload</returns>
        BackupDownload GetServerBackupDownloadUrl(int service);

        /// <summary>
        /// Generates a presigned URL for downloading a backup from AWS S3 if the backup method is &#39;archive&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <returns>ApiResponse of BackupDownload</returns>
        ApiResponse<BackupDownload> GetServerBackupDownloadUrlWithHttpInfo(int service);
        /// <summary>
        /// Display a specific DockerService associated with the given App
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="service">The service ID</param>
        /// <returns>Server</returns>
        Server GetServerById(int app, int service);

        /// <summary>
        /// Display a specific DockerService associated with the given App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="service">The service ID</param>
        /// <returns>ApiResponse of Server</returns>
        ApiResponse<Server> GetServerByIdWithHttpInfo(int app, int service);
        /// <summary>
        /// Show a specific server config
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <returns>ServerConfig</returns>
        ServerConfig GetServerConfigById(int serverConfig);

        /// <summary>
        /// Show a specific server config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <returns>ApiResponse of ServerConfig</returns>
        ApiResponse<ServerConfig> GetServerConfigByIdWithHttpInfo(int serverConfig);
        /// <summary>
        /// Show all server configs
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>List&lt;ServerConfig&gt;</returns>
        List<ServerConfig> GetServerConfigs(int app);

        /// <summary>
        /// Show all server configs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>ApiResponse of List&lt;ServerConfig&gt;</returns>
        ApiResponse<List<ServerConfig>> GetServerConfigsWithHttpInfo(int app);
        /// <summary>
        /// Get stdout and stderr logs from a service or task
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="details">details Flag (optional)</param>
        /// <param name="follow">follow Flag (optional)</param>
        /// <param name="stdout">stdout Flag (optional)</param>
        /// <param name="stderr">stderr Flag (optional)</param>
        /// <param name="since">since Flag (optional)</param>
        /// <param name="timestamps">timestamps Flag (optional)</param>
        /// <param name="tail">tail options (optional)</param>
        /// <returns>ServiceLogs</returns>
        ServiceLogs GetServerLogs(int service, bool? details = default(bool?), bool? follow = default(bool?), bool? stdout = default(bool?), bool? stderr = default(bool?), int? since = default(int?), bool? timestamps = default(bool?), string tail = default(string));

        /// <summary>
        /// Get stdout and stderr logs from a service or task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="details">details Flag (optional)</param>
        /// <param name="follow">follow Flag (optional)</param>
        /// <param name="stdout">stdout Flag (optional)</param>
        /// <param name="stderr">stderr Flag (optional)</param>
        /// <param name="since">since Flag (optional)</param>
        /// <param name="timestamps">timestamps Flag (optional)</param>
        /// <param name="tail">tail options (optional)</param>
        /// <returns>ApiResponse of ServiceLogs</returns>
        ApiResponse<ServiceLogs> GetServerLogsWithHttpInfo(int service, bool? details = default(bool?), bool? follow = default(bool?), bool? stdout = default(bool?), bool? stderr = default(bool?), int? since = default(int?), bool? timestamps = default(bool?), string tail = default(string));
        /// <summary>
        /// Show all services for a given app
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">Instance of the app to filter services by.</param>
        /// <returns>List&lt;Server&gt;</returns>
        List<Server> GetServers(int app);

        /// <summary>
        /// Show all services for a given app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">Instance of the app to filter services by.</param>
        /// <returns>ApiResponse of List&lt;Server&gt;</returns>
        ApiResponse<List<Server>> GetServersWithHttpInfo(int app);
        /// <summary>
        /// Restarts a specific Docker service
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        Object RestartServer(int service, Object body = default(Object));

        /// <summary>
        /// Restarts a specific Docker service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RestartServerWithHttpInfo(int service, Object body = default(Object));
        /// <summary>
        /// Restore a backup for a specified Docker service
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        Object RestoreBackup(int service, Object body = default(Object));

        /// <summary>
        /// Restore a backup for a specified Docker service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RestoreBackupWithHttpInfo(int service, Object body = default(Object));
        /// <summary>
        /// Update a location setting
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appLocationSetting">The app location setting ID</param>
        /// <param name="updateAppLocationSettingRequest"> (optional)</param>
        /// <returns>AppLocationSetting</returns>
        AppLocationSetting UpdateAppLocationSetting(int appLocationSetting, UpdateAppLocationSettingRequest updateAppLocationSettingRequest = default(UpdateAppLocationSettingRequest));

        /// <summary>
        /// Update a location setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appLocationSetting">The app location setting ID</param>
        /// <param name="updateAppLocationSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of AppLocationSetting</returns>
        ApiResponse<AppLocationSetting> UpdateAppLocationSettingWithHttpInfo(int appLocationSetting, UpdateAppLocationSettingRequest updateAppLocationSettingRequest = default(UpdateAppLocationSettingRequest));
        /// <summary>
        /// Update a binary and the related file
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <param name="createBinaryRequest"> (optional)</param>
        /// <returns>Binary</returns>
        Binary UpdateBinary(int binary, CreateBinaryRequest createBinaryRequest = default(CreateBinaryRequest));

        /// <summary>
        /// Update a binary and the related file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <param name="createBinaryRequest"> (optional)</param>
        /// <returns>ApiResponse of Binary</returns>
        ApiResponse<Binary> UpdateBinaryWithHttpInfo(int binary, CreateBinaryRequest createBinaryRequest = default(CreateBinaryRequest));
        /// <summary>
        /// Update a specific docker registry
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <param name="updateDockerRegistryRequest"> (optional)</param>
        /// <returns>DockerRegistry</returns>
        DockerRegistry UpdateDockerRegistry(int dockerRegistry, UpdateDockerRegistryRequest updateDockerRegistryRequest = default(UpdateDockerRegistryRequest));

        /// <summary>
        /// Update a specific docker registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <param name="updateDockerRegistryRequest"> (optional)</param>
        /// <returns>ApiResponse of DockerRegistry</returns>
        ApiResponse<DockerRegistry> UpdateDockerRegistryWithHttpInfo(int dockerRegistry, UpdateDockerRegistryRequest updateDockerRegistryRequest = default(UpdateDockerRegistryRequest));
        /// <summary>
        /// Update a server config
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <param name="createServerConfigRequest"> (optional)</param>
        /// <returns>ServerConfig</returns>
        ServerConfig UpdateServerConfig(int serverConfig, CreateServerConfigRequest createServerConfigRequest = default(CreateServerConfigRequest));

        /// <summary>
        /// Update a server config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <param name="createServerConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of ServerConfig</returns>
        ApiResponse<ServerConfig> UpdateServerConfigWithHttpInfo(int serverConfig, CreateServerConfigRequest createServerConfigRequest = default(CreateServerConfigRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOdinFleetApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAppRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of App</returns>
        System.Threading.Tasks.Task<App> CreateAppAsync(CreateAppRequest createAppRequest = default(CreateAppRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAppRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (App)</returns>
        System.Threading.Tasks.Task<ApiResponse<App>> CreateAppWithHttpInfoAsync(CreateAppRequest createAppRequest = default(CreateAppRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new location setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createAppLocationSettingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppLocationSetting</returns>
        System.Threading.Tasks.Task<AppLocationSetting> CreateAppLocationSettingAsync(int app, CreateAppLocationSettingRequest createAppLocationSettingRequest = default(CreateAppLocationSettingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new location setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createAppLocationSettingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppLocationSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppLocationSetting>> CreateAppLocationSettingWithHttpInfoAsync(int app, CreateAppLocationSettingRequest createAppLocationSettingRequest = default(CreateAppLocationSettingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a backup of the service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="createBackupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateBackupAsync(int service, CreateBackupRequest createBackupRequest = default(CreateBackupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a backup of the service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="createBackupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateBackupWithHttpInfoAsync(int service, CreateBackupRequest createBackupRequest = default(CreateBackupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a binary and the related file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createBinaryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Binary</returns>
        System.Threading.Tasks.Task<Binary> CreateBinaryAsync(int app, CreateBinaryRequest createBinaryRequest = default(CreateBinaryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a binary and the related file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createBinaryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Binary)</returns>
        System.Threading.Tasks.Task<ApiResponse<Binary>> CreateBinaryWithHttpInfoAsync(int app, CreateBinaryRequest createBinaryRequest = default(CreateBinaryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new docker registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDockerRegistryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DockerRegistry</returns>
        System.Threading.Tasks.Task<DockerRegistry> CreateDockerRegistryAsync(CreateDockerRegistryRequest createDockerRegistryRequest = default(CreateDockerRegistryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new docker registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDockerRegistryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DockerRegistry)</returns>
        System.Threading.Tasks.Task<ApiResponse<DockerRegistry>> CreateDockerRegistryWithHttpInfoAsync(CreateDockerRegistryRequest createDockerRegistryRequest = default(CreateDockerRegistryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new server config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createServerConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServerConfig</returns>
        System.Threading.Tasks.Task<ServerConfig> CreateServerConfigAsync(int app, CreateServerConfigRequest createServerConfigRequest = default(CreateServerConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new server config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createServerConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServerConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServerConfig>> CreateServerConfigWithHttpInfoAsync(int app, CreateServerConfigRequest createServerConfigRequest = default(CreateServerConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a specific app
        /// </summary>
        /// <remarks>
        /// This method is responsible for deleting an App record from the database. It locates the App instance using the provided ID, and if found, proceeds to delete it. Upon successful deletion, an HTTP 204 No Content response is returned, indicating that the action was successful.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteAppAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a specific app
        /// </summary>
        /// <remarks>
        /// This method is responsible for deleting an App record from the database. It locates the App instance using the provided ID, and if found, proceeds to delete it. Upon successful deletion, an HTTP 204 No Content response is returned, indicating that the action was successful.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAppWithHttpInfoAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a location setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appLocationSetting">The app location setting ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteAppLocationSettingAsync(int appLocationSetting, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a location setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appLocationSetting">The app location setting ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAppLocationSettingWithHttpInfoAsync(int appLocationSetting, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Handles the deletion of a user&#39;s authentication tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sid">The session id of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteAuthTokenAsync(string sid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Handles the deletion of a user&#39;s authentication tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sid">The session id of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthTokenWithHttpInfoAsync(string sid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a specified binary
        /// </summary>
        /// <remarks>
        /// It first finds the Binary instance by its ID. If the instance is found, it is deleted. The method then returns an HTTP 204 No Content response to indicate successful deletion.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteBinaryAsync(int binary, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a specified binary
        /// </summary>
        /// <remarks>
        /// It first finds the Binary instance by its ID. If the instance is found, it is deleted. The method then returns an HTTP 204 No Content response to indicate successful deletion.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBinaryWithHttpInfoAsync(int binary, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a specific docker registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteDockerRegistryAsync(int dockerRegistry, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a specific docker registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDockerRegistryWithHttpInfoAsync(int dockerRegistry, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a specific server config
        /// </summary>
        /// <remarks>
        /// This method handles the deletion of a ServerConfig record from the database. It first finds the ServerConfig instance by its ID, and if found, deletes it. Returns an HTTP 204 No Content response upon successful deletion.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteServerConfigAsync(int serverConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a specific server config
        /// </summary>
        /// <remarks>
        /// This method handles the deletion of a ServerConfig record from the database. It first finds the ServerConfig instance by its ID, and if found, deletes it. Returns an HTTP 204 No Content response upon successful deletion.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteServerConfigWithHttpInfoAsync(int serverConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show a specific app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of App</returns>
        System.Threading.Tasks.Task<App> GetAppByIdAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show a specific app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (App)</returns>
        System.Threading.Tasks.Task<ApiResponse<App>> GetAppByIdWithHttpInfoAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show all location settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AppLocationSetting&gt;</returns>
        System.Threading.Tasks.Task<List<AppLocationSetting>> GetAppLocationSettingsAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show all location settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AppLocationSetting&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AppLocationSetting>>> GetAppLocationSettingsWithHttpInfoAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show all apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;App&gt;</returns>
        System.Threading.Tasks.Task<List<App>> GetAppsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show all apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;App&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<App>>> GetAppsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Handles user authentication
        /// </summary>
        /// <remarks>
        /// Validates the incoming request and attempts to authenticate the user based on the provided session ID. If the user is authenticated successfully, it returns an AuthResource containing the user&#39;s bearer token.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAuthTokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Auth</returns>
        System.Threading.Tasks.Task<Auth> GetAuthTokenAsync(GetAuthTokenRequest getAuthTokenRequest = default(GetAuthTokenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Handles user authentication
        /// </summary>
        /// <remarks>
        /// Validates the incoming request and attempts to authenticate the user based on the provided session ID. If the user is authenticated successfully, it returns an AuthResource containing the user&#39;s bearer token.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAuthTokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Auth)</returns>
        System.Threading.Tasks.Task<ApiResponse<Auth>> GetAuthTokenWithHttpInfoAsync(GetAuthTokenRequest getAuthTokenRequest = default(GetAuthTokenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all backups for the specified Docker service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Backup&gt;</returns>
        System.Threading.Tasks.Task<List<Backup>> GetBackupsAsync(int service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all backups for the specified Docker service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Backup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Backup>>> GetBackupsWithHttpInfoAsync(int service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show all binaries
        /// </summary>
        /// <remarks>
        /// Eager load file types and config templates to reduce the number of queries.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Binary&gt;</returns>
        System.Threading.Tasks.Task<List<Binary>> GetBinariesAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show all binaries
        /// </summary>
        /// <remarks>
        /// Eager load file types and config templates to reduce the number of queries.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Binary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Binary>>> GetBinariesWithHttpInfoAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show a specific binary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Binary</returns>
        System.Threading.Tasks.Task<Binary> GetBinaryByIdAsync(int binary, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show a specific binary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Binary)</returns>
        System.Threading.Tasks.Task<ApiResponse<Binary>> GetBinaryByIdWithHttpInfoAsync(int binary, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show all docker registries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DockerRegistry&gt;</returns>
        System.Threading.Tasks.Task<List<DockerRegistry>> GetDockerRegistriesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show all docker registries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DockerRegistry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DockerRegistry>>> GetDockerRegistriesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Display a specific docker registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DockerRegistry</returns>
        System.Threading.Tasks.Task<DockerRegistry> GetDockerRegistryByIdAsync(int dockerRegistry, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Display a specific docker registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DockerRegistry)</returns>
        System.Threading.Tasks.Task<ApiResponse<DockerRegistry>> GetDockerRegistryByIdWithHttpInfoAsync(int dockerRegistry, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show a unique listing of locations based on active and ready worker nodes
        /// </summary>
        /// <remarks>
        /// Synchronizes the local database with the state of Docker nodes, then filters for active, ready worker nodes to create a unique listing of their location labels. These nodes are suitable for deployment.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Location&gt;</returns>
        System.Threading.Tasks.Task<List<Location>> GetLocationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show a unique listing of locations based on active and ready worker nodes
        /// </summary>
        /// <remarks>
        /// Synchronizes the local database with the state of Docker nodes, then filters for active, ready worker nodes to create a unique listing of their location labels. These nodes are suitable for deployment.
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Location&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Location>>> GetLocationsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Display the most recent backup for the specified Docker service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Backup</returns>
        System.Threading.Tasks.Task<Backup> GetMostRecentBackupAsync(int service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Display the most recent backup for the specified Docker service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Backup)</returns>
        System.Threading.Tasks.Task<ApiResponse<Backup>> GetMostRecentBackupWithHttpInfoAsync(int service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generates a presigned URL for downloading a backup from AWS S3 if the backup method is &#39;archive&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BackupDownload</returns>
        System.Threading.Tasks.Task<BackupDownload> GetServerBackupDownloadUrlAsync(int service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generates a presigned URL for downloading a backup from AWS S3 if the backup method is &#39;archive&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BackupDownload)</returns>
        System.Threading.Tasks.Task<ApiResponse<BackupDownload>> GetServerBackupDownloadUrlWithHttpInfoAsync(int service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Display a specific DockerService associated with the given App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="service">The service ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Server</returns>
        System.Threading.Tasks.Task<Server> GetServerByIdAsync(int app, int service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Display a specific DockerService associated with the given App
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="service">The service ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Server)</returns>
        System.Threading.Tasks.Task<ApiResponse<Server>> GetServerByIdWithHttpInfoAsync(int app, int service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show a specific server config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServerConfig</returns>
        System.Threading.Tasks.Task<ServerConfig> GetServerConfigByIdAsync(int serverConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show a specific server config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServerConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServerConfig>> GetServerConfigByIdWithHttpInfoAsync(int serverConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show all server configs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServerConfig&gt;</returns>
        System.Threading.Tasks.Task<List<ServerConfig>> GetServerConfigsAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show all server configs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServerConfig&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServerConfig>>> GetServerConfigsWithHttpInfoAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get stdout and stderr logs from a service or task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="details">details Flag (optional)</param>
        /// <param name="follow">follow Flag (optional)</param>
        /// <param name="stdout">stdout Flag (optional)</param>
        /// <param name="stderr">stderr Flag (optional)</param>
        /// <param name="since">since Flag (optional)</param>
        /// <param name="timestamps">timestamps Flag (optional)</param>
        /// <param name="tail">tail options (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceLogs</returns>
        System.Threading.Tasks.Task<ServiceLogs> GetServerLogsAsync(int service, bool? details = default(bool?), bool? follow = default(bool?), bool? stdout = default(bool?), bool? stderr = default(bool?), int? since = default(int?), bool? timestamps = default(bool?), string tail = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get stdout and stderr logs from a service or task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="details">details Flag (optional)</param>
        /// <param name="follow">follow Flag (optional)</param>
        /// <param name="stdout">stdout Flag (optional)</param>
        /// <param name="stderr">stderr Flag (optional)</param>
        /// <param name="since">since Flag (optional)</param>
        /// <param name="timestamps">timestamps Flag (optional)</param>
        /// <param name="tail">tail options (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceLogs)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceLogs>> GetServerLogsWithHttpInfoAsync(int service, bool? details = default(bool?), bool? follow = default(bool?), bool? stdout = default(bool?), bool? stderr = default(bool?), int? since = default(int?), bool? timestamps = default(bool?), string tail = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show all services for a given app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">Instance of the app to filter services by.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Server&gt;</returns>
        System.Threading.Tasks.Task<List<Server>> GetServersAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show all services for a given app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">Instance of the app to filter services by.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Server&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Server>>> GetServersWithHttpInfoAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Restarts a specific Docker service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RestartServerAsync(int service, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Restarts a specific Docker service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RestartServerWithHttpInfoAsync(int service, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Restore a backup for a specified Docker service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RestoreBackupAsync(int service, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Restore a backup for a specified Docker service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RestoreBackupWithHttpInfoAsync(int service, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a location setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appLocationSetting">The app location setting ID</param>
        /// <param name="updateAppLocationSettingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppLocationSetting</returns>
        System.Threading.Tasks.Task<AppLocationSetting> UpdateAppLocationSettingAsync(int appLocationSetting, UpdateAppLocationSettingRequest updateAppLocationSettingRequest = default(UpdateAppLocationSettingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a location setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appLocationSetting">The app location setting ID</param>
        /// <param name="updateAppLocationSettingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppLocationSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppLocationSetting>> UpdateAppLocationSettingWithHttpInfoAsync(int appLocationSetting, UpdateAppLocationSettingRequest updateAppLocationSettingRequest = default(UpdateAppLocationSettingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a binary and the related file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <param name="createBinaryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Binary</returns>
        System.Threading.Tasks.Task<Binary> UpdateBinaryAsync(int binary, CreateBinaryRequest createBinaryRequest = default(CreateBinaryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a binary and the related file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <param name="createBinaryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Binary)</returns>
        System.Threading.Tasks.Task<ApiResponse<Binary>> UpdateBinaryWithHttpInfoAsync(int binary, CreateBinaryRequest createBinaryRequest = default(CreateBinaryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a specific docker registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <param name="updateDockerRegistryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DockerRegistry</returns>
        System.Threading.Tasks.Task<DockerRegistry> UpdateDockerRegistryAsync(int dockerRegistry, UpdateDockerRegistryRequest updateDockerRegistryRequest = default(UpdateDockerRegistryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a specific docker registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <param name="updateDockerRegistryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DockerRegistry)</returns>
        System.Threading.Tasks.Task<ApiResponse<DockerRegistry>> UpdateDockerRegistryWithHttpInfoAsync(int dockerRegistry, UpdateDockerRegistryRequest updateDockerRegistryRequest = default(UpdateDockerRegistryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a server config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <param name="createServerConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServerConfig</returns>
        System.Threading.Tasks.Task<ServerConfig> UpdateServerConfigAsync(int serverConfig, CreateServerConfigRequest createServerConfigRequest = default(CreateServerConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a server config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <param name="createServerConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServerConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServerConfig>> UpdateServerConfigWithHttpInfoAsync(int serverConfig, CreateServerConfigRequest createServerConfigRequest = default(CreateServerConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOdinFleetApi : IOdinFleetApiSync, IOdinFleetApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OdinFleetApi : IDisposable, IOdinFleetApi
    {
        private OdinFleet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OdinFleetApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public OdinFleetApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OdinFleetApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public OdinFleetApi(string basePath)
        {
            this.Configuration = OdinFleet.Client.Configuration.MergeConfigurations(
                OdinFleet.Client.GlobalConfiguration.Instance,
                new OdinFleet.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new OdinFleet.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = OdinFleet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OdinFleetApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public OdinFleetApi(OdinFleet.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OdinFleet.Client.Configuration.MergeConfigurations(
                OdinFleet.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new OdinFleet.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = OdinFleet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OdinFleetApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OdinFleetApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OdinFleetApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OdinFleetApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = OdinFleet.Client.Configuration.MergeConfigurations(
                OdinFleet.Client.GlobalConfiguration.Instance,
                new OdinFleet.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new OdinFleet.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = OdinFleet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OdinFleetApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OdinFleetApi(HttpClient client, OdinFleet.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = OdinFleet.Client.Configuration.MergeConfigurations(
                OdinFleet.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new OdinFleet.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = OdinFleet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OdinFleetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public OdinFleetApi(OdinFleet.Client.ISynchronousClient client, OdinFleet.Client.IAsynchronousClient asyncClient, OdinFleet.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OdinFleet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public OdinFleet.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OdinFleet.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OdinFleet.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OdinFleet.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OdinFleet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an app 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAppRequest"> (optional)</param>
        /// <returns>App</returns>
        public App CreateApp(CreateAppRequest createAppRequest = default(CreateAppRequest))
        {
            OdinFleet.Client.ApiResponse<App> localVarResponse = CreateAppWithHttpInfo(createAppRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an app 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAppRequest"> (optional)</param>
        /// <returns>ApiResponse of App</returns>
        public OdinFleet.Client.ApiResponse<App> CreateAppWithHttpInfo(CreateAppRequest createAppRequest = default(CreateAppRequest))
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createAppRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<App>("/v1/apps", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateApp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an app 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAppRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of App</returns>
        public async System.Threading.Tasks.Task<App> CreateAppAsync(CreateAppRequest createAppRequest = default(CreateAppRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<App> localVarResponse = await CreateAppWithHttpInfoAsync(createAppRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an app 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAppRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (App)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<App>> CreateAppWithHttpInfoAsync(CreateAppRequest createAppRequest = default(CreateAppRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createAppRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<App>("/v1/apps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateApp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new location setting 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createAppLocationSettingRequest"> (optional)</param>
        /// <returns>AppLocationSetting</returns>
        public AppLocationSetting CreateAppLocationSetting(int app, CreateAppLocationSettingRequest createAppLocationSettingRequest = default(CreateAppLocationSettingRequest))
        {
            OdinFleet.Client.ApiResponse<AppLocationSetting> localVarResponse = CreateAppLocationSettingWithHttpInfo(app, createAppLocationSettingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new location setting 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createAppLocationSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of AppLocationSetting</returns>
        public OdinFleet.Client.ApiResponse<AppLocationSetting> CreateAppLocationSettingWithHttpInfo(int app, CreateAppLocationSettingRequest createAppLocationSettingRequest = default(CreateAppLocationSettingRequest))
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.Data = createAppLocationSettingRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AppLocationSetting>("/v1/apps/{app}/location-settings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAppLocationSetting", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new location setting 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createAppLocationSettingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppLocationSetting</returns>
        public async System.Threading.Tasks.Task<AppLocationSetting> CreateAppLocationSettingAsync(int app, CreateAppLocationSettingRequest createAppLocationSettingRequest = default(CreateAppLocationSettingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<AppLocationSetting> localVarResponse = await CreateAppLocationSettingWithHttpInfoAsync(app, createAppLocationSettingRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new location setting 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createAppLocationSettingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppLocationSetting)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<AppLocationSetting>> CreateAppLocationSettingWithHttpInfoAsync(int app, CreateAppLocationSettingRequest createAppLocationSettingRequest = default(CreateAppLocationSettingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.Data = createAppLocationSettingRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AppLocationSetting>("/v1/apps/{app}/location-settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAppLocationSetting", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a backup of the service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="createBackupRequest"> (optional)</param>
        /// <returns>Object</returns>
        public Object CreateBackup(int service, CreateBackupRequest createBackupRequest = default(CreateBackupRequest))
        {
            OdinFleet.Client.ApiResponse<Object> localVarResponse = CreateBackupWithHttpInfo(service, createBackupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a backup of the service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="createBackupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public OdinFleet.Client.ApiResponse<Object> CreateBackupWithHttpInfo(int service, CreateBackupRequest createBackupRequest = default(CreateBackupRequest))
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", OdinFleet.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.Data = createBackupRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/services/{service}/backup", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBackup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a backup of the service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="createBackupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateBackupAsync(int service, CreateBackupRequest createBackupRequest = default(CreateBackupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<Object> localVarResponse = await CreateBackupWithHttpInfoAsync(service, createBackupRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a backup of the service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="createBackupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<Object>> CreateBackupWithHttpInfoAsync(int service, CreateBackupRequest createBackupRequest = default(CreateBackupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", OdinFleet.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.Data = createBackupRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/services/{service}/backup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBackup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a binary and the related file 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createBinaryRequest"> (optional)</param>
        /// <returns>Binary</returns>
        public Binary CreateBinary(int app, CreateBinaryRequest createBinaryRequest = default(CreateBinaryRequest))
        {
            OdinFleet.Client.ApiResponse<Binary> localVarResponse = CreateBinaryWithHttpInfo(app, createBinaryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a binary and the related file 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createBinaryRequest"> (optional)</param>
        /// <returns>ApiResponse of Binary</returns>
        public OdinFleet.Client.ApiResponse<Binary> CreateBinaryWithHttpInfo(int app, CreateBinaryRequest createBinaryRequest = default(CreateBinaryRequest))
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.Data = createBinaryRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Binary>("/v1/apps/{app}/binaries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBinary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a binary and the related file 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createBinaryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Binary</returns>
        public async System.Threading.Tasks.Task<Binary> CreateBinaryAsync(int app, CreateBinaryRequest createBinaryRequest = default(CreateBinaryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<Binary> localVarResponse = await CreateBinaryWithHttpInfoAsync(app, createBinaryRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a binary and the related file 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createBinaryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Binary)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<Binary>> CreateBinaryWithHttpInfoAsync(int app, CreateBinaryRequest createBinaryRequest = default(CreateBinaryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.Data = createBinaryRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Binary>("/v1/apps/{app}/binaries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBinary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new docker registry 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDockerRegistryRequest"> (optional)</param>
        /// <returns>DockerRegistry</returns>
        public DockerRegistry CreateDockerRegistry(CreateDockerRegistryRequest createDockerRegistryRequest = default(CreateDockerRegistryRequest))
        {
            OdinFleet.Client.ApiResponse<DockerRegistry> localVarResponse = CreateDockerRegistryWithHttpInfo(createDockerRegistryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new docker registry 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDockerRegistryRequest"> (optional)</param>
        /// <returns>ApiResponse of DockerRegistry</returns>
        public OdinFleet.Client.ApiResponse<DockerRegistry> CreateDockerRegistryWithHttpInfo(CreateDockerRegistryRequest createDockerRegistryRequest = default(CreateDockerRegistryRequest))
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createDockerRegistryRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DockerRegistry>("/v1/docker-registries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDockerRegistry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new docker registry 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDockerRegistryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DockerRegistry</returns>
        public async System.Threading.Tasks.Task<DockerRegistry> CreateDockerRegistryAsync(CreateDockerRegistryRequest createDockerRegistryRequest = default(CreateDockerRegistryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<DockerRegistry> localVarResponse = await CreateDockerRegistryWithHttpInfoAsync(createDockerRegistryRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new docker registry 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDockerRegistryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DockerRegistry)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<DockerRegistry>> CreateDockerRegistryWithHttpInfoAsync(CreateDockerRegistryRequest createDockerRegistryRequest = default(CreateDockerRegistryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createDockerRegistryRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DockerRegistry>("/v1/docker-registries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDockerRegistry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new server config 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createServerConfigRequest"> (optional)</param>
        /// <returns>ServerConfig</returns>
        public ServerConfig CreateServerConfig(int app, CreateServerConfigRequest createServerConfigRequest = default(CreateServerConfigRequest))
        {
            OdinFleet.Client.ApiResponse<ServerConfig> localVarResponse = CreateServerConfigWithHttpInfo(app, createServerConfigRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new server config 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createServerConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of ServerConfig</returns>
        public OdinFleet.Client.ApiResponse<ServerConfig> CreateServerConfigWithHttpInfo(int app, CreateServerConfigRequest createServerConfigRequest = default(CreateServerConfigRequest))
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.Data = createServerConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ServerConfig>("/v1/apps/{app}/configs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateServerConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new server config 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createServerConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServerConfig</returns>
        public async System.Threading.Tasks.Task<ServerConfig> CreateServerConfigAsync(int app, CreateServerConfigRequest createServerConfigRequest = default(CreateServerConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<ServerConfig> localVarResponse = await CreateServerConfigWithHttpInfoAsync(app, createServerConfigRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new server config 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="createServerConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServerConfig)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<ServerConfig>> CreateServerConfigWithHttpInfoAsync(int app, CreateServerConfigRequest createServerConfigRequest = default(CreateServerConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.Data = createServerConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ServerConfig>("/v1/apps/{app}/configs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateServerConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specific app This method is responsible for deleting an App record from the database. It locates the App instance using the provided ID, and if found, proceeds to delete it. Upon successful deletion, an HTTP 204 No Content response is returned, indicating that the action was successful.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>Object</returns>
        public Object DeleteApp(int app)
        {
            OdinFleet.Client.ApiResponse<Object> localVarResponse = DeleteAppWithHttpInfo(app);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specific app This method is responsible for deleting an App record from the database. It locates the App instance using the provided ID, and if found, proceeds to delete it. Upon successful deletion, an HTTP 204 No Content response is returned, indicating that the action was successful.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>ApiResponse of Object</returns>
        public OdinFleet.Client.ApiResponse<Object> DeleteAppWithHttpInfo(int app)
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/apps/{app}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specific app This method is responsible for deleting an App record from the database. It locates the App instance using the provided ID, and if found, proceeds to delete it. Upon successful deletion, an HTTP 204 No Content response is returned, indicating that the action was successful.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteAppAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<Object> localVarResponse = await DeleteAppWithHttpInfoAsync(app, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specific app This method is responsible for deleting an App record from the database. It locates the App instance using the provided ID, and if found, proceeds to delete it. Upon successful deletion, an HTTP 204 No Content response is returned, indicating that the action was successful.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<Object>> DeleteAppWithHttpInfoAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/apps/{app}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a location setting 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appLocationSetting">The app location setting ID</param>
        /// <returns>Object</returns>
        public Object DeleteAppLocationSetting(int appLocationSetting)
        {
            OdinFleet.Client.ApiResponse<Object> localVarResponse = DeleteAppLocationSettingWithHttpInfo(appLocationSetting);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a location setting 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appLocationSetting">The app location setting ID</param>
        /// <returns>ApiResponse of Object</returns>
        public OdinFleet.Client.ApiResponse<Object> DeleteAppLocationSettingWithHttpInfo(int appLocationSetting)
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appLocationSetting", OdinFleet.Client.ClientUtils.ParameterToString(appLocationSetting)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/app-location-settings/{appLocationSetting}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAppLocationSetting", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a location setting 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appLocationSetting">The app location setting ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteAppLocationSettingAsync(int appLocationSetting, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<Object> localVarResponse = await DeleteAppLocationSettingWithHttpInfoAsync(appLocationSetting, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a location setting 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appLocationSetting">The app location setting ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<Object>> DeleteAppLocationSettingWithHttpInfoAsync(int appLocationSetting, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appLocationSetting", OdinFleet.Client.ClientUtils.ParameterToString(appLocationSetting)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/app-location-settings/{appLocationSetting}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAppLocationSetting", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handles the deletion of a user&#39;s authentication tokens 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sid">The session id of the user</param>
        /// <returns>Object</returns>
        public Object DeleteAuthToken(string sid)
        {
            OdinFleet.Client.ApiResponse<Object> localVarResponse = DeleteAuthTokenWithHttpInfo(sid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Handles the deletion of a user&#39;s authentication tokens 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sid">The session id of the user</param>
        /// <returns>ApiResponse of Object</returns>
        public OdinFleet.Client.ApiResponse<Object> DeleteAuthTokenWithHttpInfo(string sid)
        {
            // verify the required parameter 'sid' is set
            if (sid == null)
                throw new OdinFleet.Client.ApiException(400, "Missing required parameter 'sid' when calling OdinFleetApi->DeleteAuthToken");

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(OdinFleet.Client.ClientUtils.ParameterToMultiMap("", "sid", sid));


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/auth/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handles the deletion of a user&#39;s authentication tokens 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sid">The session id of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteAuthTokenAsync(string sid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<Object> localVarResponse = await DeleteAuthTokenWithHttpInfoAsync(sid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Handles the deletion of a user&#39;s authentication tokens 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sid">The session id of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<Object>> DeleteAuthTokenWithHttpInfoAsync(string sid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sid' is set
            if (sid == null)
                throw new OdinFleet.Client.ApiException(400, "Missing required parameter 'sid' when calling OdinFleetApi->DeleteAuthToken");


            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(OdinFleet.Client.ClientUtils.ParameterToMultiMap("", "sid", sid));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/auth/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specified binary It first finds the Binary instance by its ID. If the instance is found, it is deleted. The method then returns an HTTP 204 No Content response to indicate successful deletion.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <returns>Object</returns>
        public Object DeleteBinary(int binary)
        {
            OdinFleet.Client.ApiResponse<Object> localVarResponse = DeleteBinaryWithHttpInfo(binary);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specified binary It first finds the Binary instance by its ID. If the instance is found, it is deleted. The method then returns an HTTP 204 No Content response to indicate successful deletion.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <returns>ApiResponse of Object</returns>
        public OdinFleet.Client.ApiResponse<Object> DeleteBinaryWithHttpInfo(int binary)
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("binary", OdinFleet.Client.ClientUtils.ParameterToString(binary)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/binaries/{binary}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBinary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specified binary It first finds the Binary instance by its ID. If the instance is found, it is deleted. The method then returns an HTTP 204 No Content response to indicate successful deletion.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteBinaryAsync(int binary, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<Object> localVarResponse = await DeleteBinaryWithHttpInfoAsync(binary, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specified binary It first finds the Binary instance by its ID. If the instance is found, it is deleted. The method then returns an HTTP 204 No Content response to indicate successful deletion.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<Object>> DeleteBinaryWithHttpInfoAsync(int binary, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("binary", OdinFleet.Client.ClientUtils.ParameterToString(binary)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/binaries/{binary}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBinary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specific docker registry 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <returns>Object</returns>
        public Object DeleteDockerRegistry(int dockerRegistry)
        {
            OdinFleet.Client.ApiResponse<Object> localVarResponse = DeleteDockerRegistryWithHttpInfo(dockerRegistry);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specific docker registry 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <returns>ApiResponse of Object</returns>
        public OdinFleet.Client.ApiResponse<Object> DeleteDockerRegistryWithHttpInfo(int dockerRegistry)
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dockerRegistry", OdinFleet.Client.ClientUtils.ParameterToString(dockerRegistry)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/docker-registries/{dockerRegistry}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDockerRegistry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specific docker registry 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteDockerRegistryAsync(int dockerRegistry, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<Object> localVarResponse = await DeleteDockerRegistryWithHttpInfoAsync(dockerRegistry, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specific docker registry 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<Object>> DeleteDockerRegistryWithHttpInfoAsync(int dockerRegistry, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dockerRegistry", OdinFleet.Client.ClientUtils.ParameterToString(dockerRegistry)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/docker-registries/{dockerRegistry}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDockerRegistry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specific server config This method handles the deletion of a ServerConfig record from the database. It first finds the ServerConfig instance by its ID, and if found, deletes it. Returns an HTTP 204 No Content response upon successful deletion.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <returns>Object</returns>
        public Object DeleteServerConfig(int serverConfig)
        {
            OdinFleet.Client.ApiResponse<Object> localVarResponse = DeleteServerConfigWithHttpInfo(serverConfig);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specific server config This method handles the deletion of a ServerConfig record from the database. It first finds the ServerConfig instance by its ID, and if found, deletes it. Returns an HTTP 204 No Content response upon successful deletion.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <returns>ApiResponse of Object</returns>
        public OdinFleet.Client.ApiResponse<Object> DeleteServerConfigWithHttpInfo(int serverConfig)
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("serverConfig", OdinFleet.Client.ClientUtils.ParameterToString(serverConfig)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/server-configs/{serverConfig}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteServerConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specific server config This method handles the deletion of a ServerConfig record from the database. It first finds the ServerConfig instance by its ID, and if found, deletes it. Returns an HTTP 204 No Content response upon successful deletion.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteServerConfigAsync(int serverConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<Object> localVarResponse = await DeleteServerConfigWithHttpInfoAsync(serverConfig, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specific server config This method handles the deletion of a ServerConfig record from the database. It first finds the ServerConfig instance by its ID, and if found, deletes it. Returns an HTTP 204 No Content response upon successful deletion.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<Object>> DeleteServerConfigWithHttpInfoAsync(int serverConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("serverConfig", OdinFleet.Client.ClientUtils.ParameterToString(serverConfig)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/server-configs/{serverConfig}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteServerConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show a specific app 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>App</returns>
        public App GetAppById(int app)
        {
            OdinFleet.Client.ApiResponse<App> localVarResponse = GetAppByIdWithHttpInfo(app);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show a specific app 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>ApiResponse of App</returns>
        public OdinFleet.Client.ApiResponse<App> GetAppByIdWithHttpInfo(int app)
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<App>("/v1/apps/{app}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAppById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show a specific app 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of App</returns>
        public async System.Threading.Tasks.Task<App> GetAppByIdAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<App> localVarResponse = await GetAppByIdWithHttpInfoAsync(app, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show a specific app 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (App)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<App>> GetAppByIdWithHttpInfoAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<App>("/v1/apps/{app}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAppById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show all location settings 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>List&lt;AppLocationSetting&gt;</returns>
        public List<AppLocationSetting> GetAppLocationSettings(int app)
        {
            OdinFleet.Client.ApiResponse<List<AppLocationSetting>> localVarResponse = GetAppLocationSettingsWithHttpInfo(app);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show all location settings 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>ApiResponse of List&lt;AppLocationSetting&gt;</returns>
        public OdinFleet.Client.ApiResponse<List<AppLocationSetting>> GetAppLocationSettingsWithHttpInfo(int app)
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AppLocationSetting>>("/v1/apps/{app}/location-settings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAppLocationSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show all location settings 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AppLocationSetting&gt;</returns>
        public async System.Threading.Tasks.Task<List<AppLocationSetting>> GetAppLocationSettingsAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<List<AppLocationSetting>> localVarResponse = await GetAppLocationSettingsWithHttpInfoAsync(app, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show all location settings 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AppLocationSetting&gt;)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<List<AppLocationSetting>>> GetAppLocationSettingsWithHttpInfoAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AppLocationSetting>>("/v1/apps/{app}/location-settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAppLocationSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show all apps 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;App&gt;</returns>
        public List<App> GetApps()
        {
            OdinFleet.Client.ApiResponse<List<App>> localVarResponse = GetAppsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show all apps 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;App&gt;</returns>
        public OdinFleet.Client.ApiResponse<List<App>> GetAppsWithHttpInfo()
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<App>>("/v1/apps", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApps", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show all apps 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;App&gt;</returns>
        public async System.Threading.Tasks.Task<List<App>> GetAppsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<List<App>> localVarResponse = await GetAppsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show all apps 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;App&gt;)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<List<App>>> GetAppsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<App>>("/v1/apps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApps", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handles user authentication Validates the incoming request and attempts to authenticate the user based on the provided session ID. If the user is authenticated successfully, it returns an AuthResource containing the user&#39;s bearer token.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAuthTokenRequest"> (optional)</param>
        /// <returns>Auth</returns>
        public Auth GetAuthToken(GetAuthTokenRequest getAuthTokenRequest = default(GetAuthTokenRequest))
        {
            OdinFleet.Client.ApiResponse<Auth> localVarResponse = GetAuthTokenWithHttpInfo(getAuthTokenRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Handles user authentication Validates the incoming request and attempts to authenticate the user based on the provided session ID. If the user is authenticated successfully, it returns an AuthResource containing the user&#39;s bearer token.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAuthTokenRequest"> (optional)</param>
        /// <returns>ApiResponse of Auth</returns>
        public OdinFleet.Client.ApiResponse<Auth> GetAuthTokenWithHttpInfo(GetAuthTokenRequest getAuthTokenRequest = default(GetAuthTokenRequest))
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = getAuthTokenRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Auth>("/v1/auth/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handles user authentication Validates the incoming request and attempts to authenticate the user based on the provided session ID. If the user is authenticated successfully, it returns an AuthResource containing the user&#39;s bearer token.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAuthTokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Auth</returns>
        public async System.Threading.Tasks.Task<Auth> GetAuthTokenAsync(GetAuthTokenRequest getAuthTokenRequest = default(GetAuthTokenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<Auth> localVarResponse = await GetAuthTokenWithHttpInfoAsync(getAuthTokenRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Handles user authentication Validates the incoming request and attempts to authenticate the user based on the provided session ID. If the user is authenticated successfully, it returns an AuthResource containing the user&#39;s bearer token.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAuthTokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Auth)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<Auth>> GetAuthTokenWithHttpInfoAsync(GetAuthTokenRequest getAuthTokenRequest = default(GetAuthTokenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = getAuthTokenRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Auth>("/v1/auth/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all backups for the specified Docker service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <returns>List&lt;Backup&gt;</returns>
        public List<Backup> GetBackups(int service)
        {
            OdinFleet.Client.ApiResponse<List<Backup>> localVarResponse = GetBackupsWithHttpInfo(service);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all backups for the specified Docker service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <returns>ApiResponse of List&lt;Backup&gt;</returns>
        public OdinFleet.Client.ApiResponse<List<Backup>> GetBackupsWithHttpInfo(int service)
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", OdinFleet.Client.ClientUtils.ParameterToString(service)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Backup>>("/v1/services/{service}/backups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBackups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all backups for the specified Docker service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Backup&gt;</returns>
        public async System.Threading.Tasks.Task<List<Backup>> GetBackupsAsync(int service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<List<Backup>> localVarResponse = await GetBackupsWithHttpInfoAsync(service, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all backups for the specified Docker service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Backup&gt;)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<List<Backup>>> GetBackupsWithHttpInfoAsync(int service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", OdinFleet.Client.ClientUtils.ParameterToString(service)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Backup>>("/v1/services/{service}/backups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBackups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show all binaries Eager load file types and config templates to reduce the number of queries.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>List&lt;Binary&gt;</returns>
        public List<Binary> GetBinaries(int app)
        {
            OdinFleet.Client.ApiResponse<List<Binary>> localVarResponse = GetBinariesWithHttpInfo(app);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show all binaries Eager load file types and config templates to reduce the number of queries.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>ApiResponse of List&lt;Binary&gt;</returns>
        public OdinFleet.Client.ApiResponse<List<Binary>> GetBinariesWithHttpInfo(int app)
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Binary>>("/v1/apps/{app}/binaries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBinaries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show all binaries Eager load file types and config templates to reduce the number of queries.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Binary&gt;</returns>
        public async System.Threading.Tasks.Task<List<Binary>> GetBinariesAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<List<Binary>> localVarResponse = await GetBinariesWithHttpInfoAsync(app, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show all binaries Eager load file types and config templates to reduce the number of queries.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Binary&gt;)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<List<Binary>>> GetBinariesWithHttpInfoAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Binary>>("/v1/apps/{app}/binaries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBinaries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show a specific binary 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <returns>Binary</returns>
        public Binary GetBinaryById(int binary)
        {
            OdinFleet.Client.ApiResponse<Binary> localVarResponse = GetBinaryByIdWithHttpInfo(binary);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show a specific binary 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <returns>ApiResponse of Binary</returns>
        public OdinFleet.Client.ApiResponse<Binary> GetBinaryByIdWithHttpInfo(int binary)
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("binary", OdinFleet.Client.ClientUtils.ParameterToString(binary)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Binary>("/v1/binaries/{binary}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBinaryById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show a specific binary 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Binary</returns>
        public async System.Threading.Tasks.Task<Binary> GetBinaryByIdAsync(int binary, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<Binary> localVarResponse = await GetBinaryByIdWithHttpInfoAsync(binary, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show a specific binary 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Binary)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<Binary>> GetBinaryByIdWithHttpInfoAsync(int binary, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("binary", OdinFleet.Client.ClientUtils.ParameterToString(binary)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Binary>("/v1/binaries/{binary}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBinaryById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show all docker registries 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DockerRegistry&gt;</returns>
        public List<DockerRegistry> GetDockerRegistries()
        {
            OdinFleet.Client.ApiResponse<List<DockerRegistry>> localVarResponse = GetDockerRegistriesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show all docker registries 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DockerRegistry&gt;</returns>
        public OdinFleet.Client.ApiResponse<List<DockerRegistry>> GetDockerRegistriesWithHttpInfo()
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DockerRegistry>>("/v1/docker-registries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDockerRegistries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show all docker registries 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DockerRegistry&gt;</returns>
        public async System.Threading.Tasks.Task<List<DockerRegistry>> GetDockerRegistriesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<List<DockerRegistry>> localVarResponse = await GetDockerRegistriesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show all docker registries 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DockerRegistry&gt;)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<List<DockerRegistry>>> GetDockerRegistriesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DockerRegistry>>("/v1/docker-registries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDockerRegistries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Display a specific docker registry 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <returns>DockerRegistry</returns>
        public DockerRegistry GetDockerRegistryById(int dockerRegistry)
        {
            OdinFleet.Client.ApiResponse<DockerRegistry> localVarResponse = GetDockerRegistryByIdWithHttpInfo(dockerRegistry);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Display a specific docker registry 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <returns>ApiResponse of DockerRegistry</returns>
        public OdinFleet.Client.ApiResponse<DockerRegistry> GetDockerRegistryByIdWithHttpInfo(int dockerRegistry)
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dockerRegistry", OdinFleet.Client.ClientUtils.ParameterToString(dockerRegistry)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DockerRegistry>("/v1/docker-registries/{dockerRegistry}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDockerRegistryById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Display a specific docker registry 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DockerRegistry</returns>
        public async System.Threading.Tasks.Task<DockerRegistry> GetDockerRegistryByIdAsync(int dockerRegistry, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<DockerRegistry> localVarResponse = await GetDockerRegistryByIdWithHttpInfoAsync(dockerRegistry, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Display a specific docker registry 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DockerRegistry)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<DockerRegistry>> GetDockerRegistryByIdWithHttpInfoAsync(int dockerRegistry, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dockerRegistry", OdinFleet.Client.ClientUtils.ParameterToString(dockerRegistry)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DockerRegistry>("/v1/docker-registries/{dockerRegistry}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDockerRegistryById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show a unique listing of locations based on active and ready worker nodes Synchronizes the local database with the state of Docker nodes, then filters for active, ready worker nodes to create a unique listing of their location labels. These nodes are suitable for deployment.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Location&gt;</returns>
        public List<Location> GetLocations()
        {
            OdinFleet.Client.ApiResponse<List<Location>> localVarResponse = GetLocationsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show a unique listing of locations based on active and ready worker nodes Synchronizes the local database with the state of Docker nodes, then filters for active, ready worker nodes to create a unique listing of their location labels. These nodes are suitable for deployment.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Location&gt;</returns>
        public OdinFleet.Client.ApiResponse<List<Location>> GetLocationsWithHttpInfo()
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Location>>("/v1/nodes/locations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show a unique listing of locations based on active and ready worker nodes Synchronizes the local database with the state of Docker nodes, then filters for active, ready worker nodes to create a unique listing of their location labels. These nodes are suitable for deployment.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Location&gt;</returns>
        public async System.Threading.Tasks.Task<List<Location>> GetLocationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<List<Location>> localVarResponse = await GetLocationsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show a unique listing of locations based on active and ready worker nodes Synchronizes the local database with the state of Docker nodes, then filters for active, ready worker nodes to create a unique listing of their location labels. These nodes are suitable for deployment.
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Location&gt;)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<List<Location>>> GetLocationsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Location>>("/v1/nodes/locations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Display the most recent backup for the specified Docker service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <returns>Backup</returns>
        public Backup GetMostRecentBackup(int service)
        {
            OdinFleet.Client.ApiResponse<Backup> localVarResponse = GetMostRecentBackupWithHttpInfo(service);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Display the most recent backup for the specified Docker service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <returns>ApiResponse of Backup</returns>
        public OdinFleet.Client.ApiResponse<Backup> GetMostRecentBackupWithHttpInfo(int service)
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", OdinFleet.Client.ClientUtils.ParameterToString(service)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Backup>("/v1/services/{service}/backup", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMostRecentBackup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Display the most recent backup for the specified Docker service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Backup</returns>
        public async System.Threading.Tasks.Task<Backup> GetMostRecentBackupAsync(int service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<Backup> localVarResponse = await GetMostRecentBackupWithHttpInfoAsync(service, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Display the most recent backup for the specified Docker service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Backup)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<Backup>> GetMostRecentBackupWithHttpInfoAsync(int service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", OdinFleet.Client.ClientUtils.ParameterToString(service)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Backup>("/v1/services/{service}/backup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMostRecentBackup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates a presigned URL for downloading a backup from AWS S3 if the backup method is &#39;archive&#39; 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <returns>BackupDownload</returns>
        public BackupDownload GetServerBackupDownloadUrl(int service)
        {
            OdinFleet.Client.ApiResponse<BackupDownload> localVarResponse = GetServerBackupDownloadUrlWithHttpInfo(service);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a presigned URL for downloading a backup from AWS S3 if the backup method is &#39;archive&#39; 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <returns>ApiResponse of BackupDownload</returns>
        public OdinFleet.Client.ApiResponse<BackupDownload> GetServerBackupDownloadUrlWithHttpInfo(int service)
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", OdinFleet.Client.ClientUtils.ParameterToString(service)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<BackupDownload>("/v1/services/{service}/backup/download", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServerBackupDownloadUrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates a presigned URL for downloading a backup from AWS S3 if the backup method is &#39;archive&#39; 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BackupDownload</returns>
        public async System.Threading.Tasks.Task<BackupDownload> GetServerBackupDownloadUrlAsync(int service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<BackupDownload> localVarResponse = await GetServerBackupDownloadUrlWithHttpInfoAsync(service, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a presigned URL for downloading a backup from AWS S3 if the backup method is &#39;archive&#39; 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BackupDownload)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<BackupDownload>> GetServerBackupDownloadUrlWithHttpInfoAsync(int service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", OdinFleet.Client.ClientUtils.ParameterToString(service)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BackupDownload>("/v1/services/{service}/backup/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServerBackupDownloadUrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Display a specific DockerService associated with the given App 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="service">The service ID</param>
        /// <returns>Server</returns>
        public Server GetServerById(int app, int service)
        {
            OdinFleet.Client.ApiResponse<Server> localVarResponse = GetServerByIdWithHttpInfo(app, service);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Display a specific DockerService associated with the given App 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="service">The service ID</param>
        /// <returns>ApiResponse of Server</returns>
        public OdinFleet.Client.ApiResponse<Server> GetServerByIdWithHttpInfo(int app, int service)
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("service", OdinFleet.Client.ClientUtils.ParameterToString(service)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Server>("/v1/apps/{app}/services/{service}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServerById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Display a specific DockerService associated with the given App 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="service">The service ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Server</returns>
        public async System.Threading.Tasks.Task<Server> GetServerByIdAsync(int app, int service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<Server> localVarResponse = await GetServerByIdWithHttpInfoAsync(app, service, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Display a specific DockerService associated with the given App 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="service">The service ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Server)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<Server>> GetServerByIdWithHttpInfoAsync(int app, int service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("service", OdinFleet.Client.ClientUtils.ParameterToString(service)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Server>("/v1/apps/{app}/services/{service}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServerById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show a specific server config 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <returns>ServerConfig</returns>
        public ServerConfig GetServerConfigById(int serverConfig)
        {
            OdinFleet.Client.ApiResponse<ServerConfig> localVarResponse = GetServerConfigByIdWithHttpInfo(serverConfig);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show a specific server config 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <returns>ApiResponse of ServerConfig</returns>
        public OdinFleet.Client.ApiResponse<ServerConfig> GetServerConfigByIdWithHttpInfo(int serverConfig)
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("serverConfig", OdinFleet.Client.ClientUtils.ParameterToString(serverConfig)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ServerConfig>("/v1/server-configs/{serverConfig}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServerConfigById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show a specific server config 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServerConfig</returns>
        public async System.Threading.Tasks.Task<ServerConfig> GetServerConfigByIdAsync(int serverConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<ServerConfig> localVarResponse = await GetServerConfigByIdWithHttpInfoAsync(serverConfig, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show a specific server config 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServerConfig)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<ServerConfig>> GetServerConfigByIdWithHttpInfoAsync(int serverConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("serverConfig", OdinFleet.Client.ClientUtils.ParameterToString(serverConfig)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ServerConfig>("/v1/server-configs/{serverConfig}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServerConfigById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show all server configs 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>List&lt;ServerConfig&gt;</returns>
        public List<ServerConfig> GetServerConfigs(int app)
        {
            OdinFleet.Client.ApiResponse<List<ServerConfig>> localVarResponse = GetServerConfigsWithHttpInfo(app);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show all server configs 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <returns>ApiResponse of List&lt;ServerConfig&gt;</returns>
        public OdinFleet.Client.ApiResponse<List<ServerConfig>> GetServerConfigsWithHttpInfo(int app)
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ServerConfig>>("/v1/apps/{app}/configs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServerConfigs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show all server configs 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServerConfig&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServerConfig>> GetServerConfigsAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<List<ServerConfig>> localVarResponse = await GetServerConfigsWithHttpInfoAsync(app, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show all server configs 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">The app ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServerConfig&gt;)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<List<ServerConfig>>> GetServerConfigsWithHttpInfoAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ServerConfig>>("/v1/apps/{app}/configs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServerConfigs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get stdout and stderr logs from a service or task 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="details">details Flag (optional)</param>
        /// <param name="follow">follow Flag (optional)</param>
        /// <param name="stdout">stdout Flag (optional)</param>
        /// <param name="stderr">stderr Flag (optional)</param>
        /// <param name="since">since Flag (optional)</param>
        /// <param name="timestamps">timestamps Flag (optional)</param>
        /// <param name="tail">tail options (optional)</param>
        /// <returns>ServiceLogs</returns>
        public ServiceLogs GetServerLogs(int service, bool? details = default(bool?), bool? follow = default(bool?), bool? stdout = default(bool?), bool? stderr = default(bool?), int? since = default(int?), bool? timestamps = default(bool?), string tail = default(string))
        {
            OdinFleet.Client.ApiResponse<ServiceLogs> localVarResponse = GetServerLogsWithHttpInfo(service, details, follow, stdout, stderr, since, timestamps, tail);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get stdout and stderr logs from a service or task 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="details">details Flag (optional)</param>
        /// <param name="follow">follow Flag (optional)</param>
        /// <param name="stdout">stdout Flag (optional)</param>
        /// <param name="stderr">stderr Flag (optional)</param>
        /// <param name="since">since Flag (optional)</param>
        /// <param name="timestamps">timestamps Flag (optional)</param>
        /// <param name="tail">tail options (optional)</param>
        /// <returns>ApiResponse of ServiceLogs</returns>
        public OdinFleet.Client.ApiResponse<ServiceLogs> GetServerLogsWithHttpInfo(int service, bool? details = default(bool?), bool? follow = default(bool?), bool? stdout = default(bool?), bool? stderr = default(bool?), int? since = default(int?), bool? timestamps = default(bool?), string tail = default(string))
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", OdinFleet.Client.ClientUtils.ParameterToString(service)); // path parameter
            if (details != null)
            {
                localVarRequestOptions.QueryParameters.Add(OdinFleet.Client.ClientUtils.ParameterToMultiMap("", "details", details));
            }
            if (follow != null)
            {
                localVarRequestOptions.QueryParameters.Add(OdinFleet.Client.ClientUtils.ParameterToMultiMap("", "follow", follow));
            }
            if (stdout != null)
            {
                localVarRequestOptions.QueryParameters.Add(OdinFleet.Client.ClientUtils.ParameterToMultiMap("", "stdout", stdout));
            }
            if (stderr != null)
            {
                localVarRequestOptions.QueryParameters.Add(OdinFleet.Client.ClientUtils.ParameterToMultiMap("", "stderr", stderr));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(OdinFleet.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (timestamps != null)
            {
                localVarRequestOptions.QueryParameters.Add(OdinFleet.Client.ClientUtils.ParameterToMultiMap("", "timestamps", timestamps));
            }
            if (tail != null)
            {
                localVarRequestOptions.QueryParameters.Add(OdinFleet.Client.ClientUtils.ParameterToMultiMap("", "tail", tail));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceLogs>("/v1/services/{service}/logs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServerLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get stdout and stderr logs from a service or task 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="details">details Flag (optional)</param>
        /// <param name="follow">follow Flag (optional)</param>
        /// <param name="stdout">stdout Flag (optional)</param>
        /// <param name="stderr">stderr Flag (optional)</param>
        /// <param name="since">since Flag (optional)</param>
        /// <param name="timestamps">timestamps Flag (optional)</param>
        /// <param name="tail">tail options (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceLogs</returns>
        public async System.Threading.Tasks.Task<ServiceLogs> GetServerLogsAsync(int service, bool? details = default(bool?), bool? follow = default(bool?), bool? stdout = default(bool?), bool? stderr = default(bool?), int? since = default(int?), bool? timestamps = default(bool?), string tail = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<ServiceLogs> localVarResponse = await GetServerLogsWithHttpInfoAsync(service, details, follow, stdout, stderr, since, timestamps, tail, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get stdout and stderr logs from a service or task 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="details">details Flag (optional)</param>
        /// <param name="follow">follow Flag (optional)</param>
        /// <param name="stdout">stdout Flag (optional)</param>
        /// <param name="stderr">stderr Flag (optional)</param>
        /// <param name="since">since Flag (optional)</param>
        /// <param name="timestamps">timestamps Flag (optional)</param>
        /// <param name="tail">tail options (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceLogs)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<ServiceLogs>> GetServerLogsWithHttpInfoAsync(int service, bool? details = default(bool?), bool? follow = default(bool?), bool? stdout = default(bool?), bool? stderr = default(bool?), int? since = default(int?), bool? timestamps = default(bool?), string tail = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", OdinFleet.Client.ClientUtils.ParameterToString(service)); // path parameter
            if (details != null)
            {
                localVarRequestOptions.QueryParameters.Add(OdinFleet.Client.ClientUtils.ParameterToMultiMap("", "details", details));
            }
            if (follow != null)
            {
                localVarRequestOptions.QueryParameters.Add(OdinFleet.Client.ClientUtils.ParameterToMultiMap("", "follow", follow));
            }
            if (stdout != null)
            {
                localVarRequestOptions.QueryParameters.Add(OdinFleet.Client.ClientUtils.ParameterToMultiMap("", "stdout", stdout));
            }
            if (stderr != null)
            {
                localVarRequestOptions.QueryParameters.Add(OdinFleet.Client.ClientUtils.ParameterToMultiMap("", "stderr", stderr));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(OdinFleet.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (timestamps != null)
            {
                localVarRequestOptions.QueryParameters.Add(OdinFleet.Client.ClientUtils.ParameterToMultiMap("", "timestamps", timestamps));
            }
            if (tail != null)
            {
                localVarRequestOptions.QueryParameters.Add(OdinFleet.Client.ClientUtils.ParameterToMultiMap("", "tail", tail));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceLogs>("/v1/services/{service}/logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServerLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show all services for a given app 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">Instance of the app to filter services by.</param>
        /// <returns>List&lt;Server&gt;</returns>
        public List<Server> GetServers(int app)
        {
            OdinFleet.Client.ApiResponse<List<Server>> localVarResponse = GetServersWithHttpInfo(app);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show all services for a given app 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">Instance of the app to filter services by.</param>
        /// <returns>ApiResponse of List&lt;Server&gt;</returns>
        public OdinFleet.Client.ApiResponse<List<Server>> GetServersWithHttpInfo(int app)
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Server>>("/v1/apps/{app}/services", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show all services for a given app 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">Instance of the app to filter services by.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Server&gt;</returns>
        public async System.Threading.Tasks.Task<List<Server>> GetServersAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<List<Server>> localVarResponse = await GetServersWithHttpInfoAsync(app, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show all services for a given app 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">Instance of the app to filter services by.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Server&gt;)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<List<Server>>> GetServersWithHttpInfoAsync(int app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app", OdinFleet.Client.ClientUtils.ParameterToString(app)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Server>>("/v1/apps/{app}/services", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restarts a specific Docker service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public Object RestartServer(int service, Object body = default(Object))
        {
            OdinFleet.Client.ApiResponse<Object> localVarResponse = RestartServerWithHttpInfo(service, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restarts a specific Docker service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public OdinFleet.Client.ApiResponse<Object> RestartServerWithHttpInfo(int service, Object body = default(Object))
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", OdinFleet.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/services/{service}/restart", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestartServer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restarts a specific Docker service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RestartServerAsync(int service, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<Object> localVarResponse = await RestartServerWithHttpInfoAsync(service, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restarts a specific Docker service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<Object>> RestartServerWithHttpInfoAsync(int service, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", OdinFleet.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/services/{service}/restart", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestartServer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a backup for a specified Docker service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public Object RestoreBackup(int service, Object body = default(Object))
        {
            OdinFleet.Client.ApiResponse<Object> localVarResponse = RestoreBackupWithHttpInfo(service, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restore a backup for a specified Docker service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public OdinFleet.Client.ApiResponse<Object> RestoreBackupWithHttpInfo(int service, Object body = default(Object))
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", OdinFleet.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/services/{service}/restore", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreBackup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a backup for a specified Docker service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RestoreBackupAsync(int service, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<Object> localVarResponse = await RestoreBackupWithHttpInfoAsync(service, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restore a backup for a specified Docker service 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">The service ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<Object>> RestoreBackupWithHttpInfoAsync(int service, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", OdinFleet.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/services/{service}/restore", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreBackup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a location setting 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appLocationSetting">The app location setting ID</param>
        /// <param name="updateAppLocationSettingRequest"> (optional)</param>
        /// <returns>AppLocationSetting</returns>
        public AppLocationSetting UpdateAppLocationSetting(int appLocationSetting, UpdateAppLocationSettingRequest updateAppLocationSettingRequest = default(UpdateAppLocationSettingRequest))
        {
            OdinFleet.Client.ApiResponse<AppLocationSetting> localVarResponse = UpdateAppLocationSettingWithHttpInfo(appLocationSetting, updateAppLocationSettingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a location setting 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appLocationSetting">The app location setting ID</param>
        /// <param name="updateAppLocationSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of AppLocationSetting</returns>
        public OdinFleet.Client.ApiResponse<AppLocationSetting> UpdateAppLocationSettingWithHttpInfo(int appLocationSetting, UpdateAppLocationSettingRequest updateAppLocationSettingRequest = default(UpdateAppLocationSettingRequest))
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appLocationSetting", OdinFleet.Client.ClientUtils.ParameterToString(appLocationSetting)); // path parameter
            localVarRequestOptions.Data = updateAppLocationSettingRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AppLocationSetting>("/v1/app-location-settings/{appLocationSetting}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAppLocationSetting", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a location setting 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appLocationSetting">The app location setting ID</param>
        /// <param name="updateAppLocationSettingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppLocationSetting</returns>
        public async System.Threading.Tasks.Task<AppLocationSetting> UpdateAppLocationSettingAsync(int appLocationSetting, UpdateAppLocationSettingRequest updateAppLocationSettingRequest = default(UpdateAppLocationSettingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<AppLocationSetting> localVarResponse = await UpdateAppLocationSettingWithHttpInfoAsync(appLocationSetting, updateAppLocationSettingRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a location setting 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appLocationSetting">The app location setting ID</param>
        /// <param name="updateAppLocationSettingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppLocationSetting)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<AppLocationSetting>> UpdateAppLocationSettingWithHttpInfoAsync(int appLocationSetting, UpdateAppLocationSettingRequest updateAppLocationSettingRequest = default(UpdateAppLocationSettingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appLocationSetting", OdinFleet.Client.ClientUtils.ParameterToString(appLocationSetting)); // path parameter
            localVarRequestOptions.Data = updateAppLocationSettingRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AppLocationSetting>("/v1/app-location-settings/{appLocationSetting}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAppLocationSetting", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a binary and the related file 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <param name="createBinaryRequest"> (optional)</param>
        /// <returns>Binary</returns>
        public Binary UpdateBinary(int binary, CreateBinaryRequest createBinaryRequest = default(CreateBinaryRequest))
        {
            OdinFleet.Client.ApiResponse<Binary> localVarResponse = UpdateBinaryWithHttpInfo(binary, createBinaryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a binary and the related file 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <param name="createBinaryRequest"> (optional)</param>
        /// <returns>ApiResponse of Binary</returns>
        public OdinFleet.Client.ApiResponse<Binary> UpdateBinaryWithHttpInfo(int binary, CreateBinaryRequest createBinaryRequest = default(CreateBinaryRequest))
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("binary", OdinFleet.Client.ClientUtils.ParameterToString(binary)); // path parameter
            localVarRequestOptions.Data = createBinaryRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Binary>("/v1/binaries/{binary}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBinary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a binary and the related file 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <param name="createBinaryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Binary</returns>
        public async System.Threading.Tasks.Task<Binary> UpdateBinaryAsync(int binary, CreateBinaryRequest createBinaryRequest = default(CreateBinaryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<Binary> localVarResponse = await UpdateBinaryWithHttpInfoAsync(binary, createBinaryRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a binary and the related file 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binary">The binary ID</param>
        /// <param name="createBinaryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Binary)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<Binary>> UpdateBinaryWithHttpInfoAsync(int binary, CreateBinaryRequest createBinaryRequest = default(CreateBinaryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("binary", OdinFleet.Client.ClientUtils.ParameterToString(binary)); // path parameter
            localVarRequestOptions.Data = createBinaryRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Binary>("/v1/binaries/{binary}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBinary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a specific docker registry 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <param name="updateDockerRegistryRequest"> (optional)</param>
        /// <returns>DockerRegistry</returns>
        public DockerRegistry UpdateDockerRegistry(int dockerRegistry, UpdateDockerRegistryRequest updateDockerRegistryRequest = default(UpdateDockerRegistryRequest))
        {
            OdinFleet.Client.ApiResponse<DockerRegistry> localVarResponse = UpdateDockerRegistryWithHttpInfo(dockerRegistry, updateDockerRegistryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a specific docker registry 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <param name="updateDockerRegistryRequest"> (optional)</param>
        /// <returns>ApiResponse of DockerRegistry</returns>
        public OdinFleet.Client.ApiResponse<DockerRegistry> UpdateDockerRegistryWithHttpInfo(int dockerRegistry, UpdateDockerRegistryRequest updateDockerRegistryRequest = default(UpdateDockerRegistryRequest))
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dockerRegistry", OdinFleet.Client.ClientUtils.ParameterToString(dockerRegistry)); // path parameter
            localVarRequestOptions.Data = updateDockerRegistryRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<DockerRegistry>("/v1/docker-registries/{dockerRegistry}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDockerRegistry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a specific docker registry 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <param name="updateDockerRegistryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DockerRegistry</returns>
        public async System.Threading.Tasks.Task<DockerRegistry> UpdateDockerRegistryAsync(int dockerRegistry, UpdateDockerRegistryRequest updateDockerRegistryRequest = default(UpdateDockerRegistryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<DockerRegistry> localVarResponse = await UpdateDockerRegistryWithHttpInfoAsync(dockerRegistry, updateDockerRegistryRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a specific docker registry 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dockerRegistry">The docker registry ID</param>
        /// <param name="updateDockerRegistryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DockerRegistry)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<DockerRegistry>> UpdateDockerRegistryWithHttpInfoAsync(int dockerRegistry, UpdateDockerRegistryRequest updateDockerRegistryRequest = default(UpdateDockerRegistryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dockerRegistry", OdinFleet.Client.ClientUtils.ParameterToString(dockerRegistry)); // path parameter
            localVarRequestOptions.Data = updateDockerRegistryRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<DockerRegistry>("/v1/docker-registries/{dockerRegistry}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDockerRegistry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a server config 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <param name="createServerConfigRequest"> (optional)</param>
        /// <returns>ServerConfig</returns>
        public ServerConfig UpdateServerConfig(int serverConfig, CreateServerConfigRequest createServerConfigRequest = default(CreateServerConfigRequest))
        {
            OdinFleet.Client.ApiResponse<ServerConfig> localVarResponse = UpdateServerConfigWithHttpInfo(serverConfig, createServerConfigRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a server config 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <param name="createServerConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of ServerConfig</returns>
        public OdinFleet.Client.ApiResponse<ServerConfig> UpdateServerConfigWithHttpInfo(int serverConfig, CreateServerConfigRequest createServerConfigRequest = default(CreateServerConfigRequest))
        {
            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("serverConfig", OdinFleet.Client.ClientUtils.ParameterToString(serverConfig)); // path parameter
            localVarRequestOptions.Data = createServerConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ServerConfig>("/v1/server-configs/{serverConfig}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateServerConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a server config 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <param name="createServerConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServerConfig</returns>
        public async System.Threading.Tasks.Task<ServerConfig> UpdateServerConfigAsync(int serverConfig, CreateServerConfigRequest createServerConfigRequest = default(CreateServerConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OdinFleet.Client.ApiResponse<ServerConfig> localVarResponse = await UpdateServerConfigWithHttpInfoAsync(serverConfig, createServerConfigRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a server config 
        /// </summary>
        /// <exception cref="OdinFleet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverConfig">The server config ID</param>
        /// <param name="createServerConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServerConfig)</returns>
        public async System.Threading.Tasks.Task<OdinFleet.Client.ApiResponse<ServerConfig>> UpdateServerConfigWithHttpInfoAsync(int serverConfig, CreateServerConfigRequest createServerConfigRequest = default(CreateServerConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OdinFleet.Client.RequestOptions localVarRequestOptions = new OdinFleet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = OdinFleet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OdinFleet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("serverConfig", OdinFleet.Client.ClientUtils.ParameterToString(serverConfig)); // path parameter
            localVarRequestOptions.Data = createServerConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ServerConfig>("/v1/server-configs/{serverConfig}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateServerConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
