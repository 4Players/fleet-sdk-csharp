/*
 * ODIN Fleet API
 *
 * API to access Odin Fleet, empowering developers to deploy gameservers all around the world in just a few lines of code.
 *
 * The version of the OpenAPI document: 0.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = OdinFleet.Client.FileParameter;
using OpenAPIDateConverter = OdinFleet.Client.OpenAPIDateConverter;

namespace OdinFleet.Model
{
    /// <summary>
    /// Backup
    /// </summary>
    [DataContract(Name = "Backup")]
    public partial class Backup : IValidatableObject
    {

        /// <summary>
        /// The method of the archive
        /// </summary>
        /// <value>The method of the archive</value>
        [DataMember(Name = "backupMethod", IsRequired = true, EmitDefaultValue = true)]
        public BackupType BackupMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Backup" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Backup() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Backup" /> class.
        /// </summary>
        /// <param name="name">The name of the backup (required).</param>
        /// <param name="archiveName">The name of the stored archive (required).</param>
        /// <param name="backupMethod">The method of the archive (required).</param>
        /// <param name="awsRegion">The AWS region the backup is stored at (required).</param>
        /// <param name="createdAt">The timestamp of the backups creation (required).</param>
        /// <param name="restoredAt">$restoredAt The timestamp of when the backup was restored, null if not restored (required).</param>
        public Backup(string name = default(string), string archiveName = default(string), BackupType backupMethod = default(BackupType), string awsRegion = default(string), DateTime createdAt = default(DateTime), DateTime? restoredAt = default(DateTime?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Backup and cannot be null");
            }
            this.Name = name;
            // to ensure "archiveName" is required (not null)
            if (archiveName == null)
            {
                throw new ArgumentNullException("archiveName is a required property for Backup and cannot be null");
            }
            this.ArchiveName = archiveName;
            this.BackupMethod = backupMethod;
            // to ensure "awsRegion" is required (not null)
            if (awsRegion == null)
            {
                throw new ArgumentNullException("awsRegion is a required property for Backup and cannot be null");
            }
            this.AwsRegion = awsRegion;
            this.CreatedAt = createdAt;
            // to ensure "restoredAt" is required (not null)
            if (restoredAt == null)
            {
                throw new ArgumentNullException("restoredAt is a required property for Backup and cannot be null");
            }
            this.RestoredAt = restoredAt;
        }

        /// <summary>
        /// The name of the backup
        /// </summary>
        /// <value>The name of the backup</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The name of the stored archive
        /// </summary>
        /// <value>The name of the stored archive</value>
        [DataMember(Name = "archiveName", IsRequired = true, EmitDefaultValue = true)]
        public string ArchiveName { get; set; }

        /// <summary>
        /// The AWS region the backup is stored at
        /// </summary>
        /// <value>The AWS region the backup is stored at</value>
        [DataMember(Name = "awsRegion", IsRequired = true, EmitDefaultValue = true)]
        public string AwsRegion { get; set; }

        /// <summary>
        /// The timestamp of the backups creation
        /// </summary>
        /// <value>The timestamp of the backups creation</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// $restoredAt The timestamp of when the backup was restored, null if not restored
        /// </summary>
        /// <value>$restoredAt The timestamp of when the backup was restored, null if not restored</value>
        [DataMember(Name = "restoredAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? RestoredAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Backup {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ArchiveName: ").Append(ArchiveName).Append("\n");
            sb.Append("  BackupMethod: ").Append(BackupMethod).Append("\n");
            sb.Append("  AwsRegion: ").Append(AwsRegion).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  RestoredAt: ").Append(RestoredAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
