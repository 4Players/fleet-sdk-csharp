/*
 * ODIN Fleet API
 *
 * API to access Odin Fleet, empowering developers to deploy gameservers all around the world in just a few lines of code.
 *
 * The version of the OpenAPI document: 0.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = OdinFleet.Client.FileParameter;
using OpenAPIDateConverter = OdinFleet.Client.OpenAPIDateConverter;

namespace OdinFleet.Model
{
    /// <summary>
    /// CreateBinaryRequest
    /// </summary>
    [DataContract(Name = "createBinary_request")]
    public partial class CreateBinaryRequest : IValidatableObject
    {

        /// <summary>
        /// The type of the binary
        /// </summary>
        /// <value>The type of the binary</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public BinaryType Type { get; set; }

        /// <summary>
        /// The operating system of the binary
        /// </summary>
        /// <value>The operating system of the binary</value>
        [DataMember(Name = "os", IsRequired = true, EmitDefaultValue = true)]
        public ModelOperatingSystem Os { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBinaryRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateBinaryRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBinaryRequest" /> class.
        /// </summary>
        /// <param name="name">The name of the binary (required).</param>
        /// <param name="varVersion">The version of the binary (required).</param>
        /// <param name="type">The type of the binary (required).</param>
        /// <param name="os">The operating system of the binary (required).</param>
        /// <param name="dockerCompose">The docker compose settings.</param>
        /// <param name="zipFile">The zip file settings.</param>
        /// <param name="steam">The steam settings.</param>
        /// <param name="dockerImage">The docker image settings.</param>
        public CreateBinaryRequest(string name = default(string), string varVersion = default(string), BinaryType type = default(BinaryType), ModelOperatingSystem os = default(ModelOperatingSystem), DockerCompose dockerCompose = default(DockerCompose), ZipFile zipFile = default(ZipFile), SteamWorks steam = default(SteamWorks), DockerImage dockerImage = default(DockerImage))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateBinaryRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for CreateBinaryRequest and cannot be null");
            }
            this.VarVersion = varVersion;
            this.Type = type;
            this.Os = os;
            this.DockerCompose = dockerCompose;
            this.ZipFile = zipFile;
            this.Steam = steam;
            this.DockerImage = dockerImage;
        }

        /// <summary>
        /// The name of the binary
        /// </summary>
        /// <value>The name of the binary</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The version of the binary
        /// </summary>
        /// <value>The version of the binary</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// The docker compose settings
        /// </summary>
        /// <value>The docker compose settings</value>
        [DataMember(Name = "dockerCompose", EmitDefaultValue = false)]
        public DockerCompose DockerCompose { get; set; }

        /// <summary>
        /// The zip file settings
        /// </summary>
        /// <value>The zip file settings</value>
        [DataMember(Name = "zipFile", EmitDefaultValue = false)]
        public ZipFile ZipFile { get; set; }

        /// <summary>
        /// The steam settings
        /// </summary>
        /// <value>The steam settings</value>
        [DataMember(Name = "steam", EmitDefaultValue = false)]
        public SteamWorks Steam { get; set; }

        /// <summary>
        /// The docker image settings
        /// </summary>
        /// <value>The docker image settings</value>
        [DataMember(Name = "dockerImage", EmitDefaultValue = false)]
        public DockerImage DockerImage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateBinaryRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Os: ").Append(Os).Append("\n");
            sb.Append("  DockerCompose: ").Append(DockerCompose).Append("\n");
            sb.Append("  ZipFile: ").Append(ZipFile).Append("\n");
            sb.Append("  Steam: ").Append(Steam).Append("\n");
            sb.Append("  DockerImage: ").Append(DockerImage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
