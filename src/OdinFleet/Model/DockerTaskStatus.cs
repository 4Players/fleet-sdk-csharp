/*
 * ODIN Fleet API
 *
 * API to access Odin Fleet, empowering developers to deploy gameservers all around the world in just a few lines of code.
 *
 * The version of the OpenAPI document: 0.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = OdinFleet.Client.FileParameter;
using OpenAPIDateConverter = OdinFleet.Client.OpenAPIDateConverter;

namespace OdinFleet.Model
{
    /// <summary>
    /// DockerTaskStatus
    /// </summary>
    [DataContract(Name = "DockerTaskStatus")]
    public partial class DockerTaskStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DockerTaskStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DockerTaskStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DockerTaskStatus" /> class.
        /// </summary>
        /// <param name="state">The state of the task (required).</param>
        /// <param name="message">The message from the task (required).</param>
        /// <param name="err">The error from the task (required).</param>
        /// <param name="timestamp">The timestamp of the status request (required).</param>
        public DockerTaskStatus(string state = default(string), string message = default(string), string err = default(string), string timestamp = default(string))
        {
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for DockerTaskStatus and cannot be null");
            }
            this.State = state;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for DockerTaskStatus and cannot be null");
            }
            this.Message = message;
            // to ensure "err" is required (not null)
            if (err == null)
            {
                throw new ArgumentNullException("err is a required property for DockerTaskStatus and cannot be null");
            }
            this.Err = err;
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new ArgumentNullException("timestamp is a required property for DockerTaskStatus and cannot be null");
            }
            this.Timestamp = timestamp;
        }

        /// <summary>
        /// The state of the task
        /// </summary>
        /// <value>The state of the task</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// The message from the task
        /// </summary>
        /// <value>The message from the task</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// The error from the task
        /// </summary>
        /// <value>The error from the task</value>
        [DataMember(Name = "err", IsRequired = true, EmitDefaultValue = true)]
        public string Err { get; set; }

        /// <summary>
        /// The timestamp of the status request
        /// </summary>
        /// <value>The timestamp of the status request</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DockerTaskStatus {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Err: ").Append(Err).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
