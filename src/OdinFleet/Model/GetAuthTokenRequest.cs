/*
 * ODIN Fleet API
 *
 * API to access Odin Fleet, empowering developers to deploy gameservers all around the world in just a few lines of code.
 *
 * The version of the OpenAPI document: 0.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = OdinFleet.Client.FileParameter;
using OpenAPIDateConverter = OdinFleet.Client.OpenAPIDateConverter;

namespace OdinFleet.Model
{
    /// <summary>
    /// GetAuthTokenRequest
    /// </summary>
    [DataContract(Name = "getAuthToken_request")]
    public partial class GetAuthTokenRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAuthTokenRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetAuthTokenRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAuthTokenRequest" /> class.
        /// </summary>
        /// <param name="email">The email of the user (required).</param>
        /// <param name="password">The password of the user (required).</param>
        /// <param name="sid">The fusion session id of the user (required).</param>
        public GetAuthTokenRequest(string email = default(string), string password = default(string), string sid = default(string))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for GetAuthTokenRequest and cannot be null");
            }
            this.Email = email;
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new ArgumentNullException("password is a required property for GetAuthTokenRequest and cannot be null");
            }
            this.Password = password;
            // to ensure "sid" is required (not null)
            if (sid == null)
            {
                throw new ArgumentNullException("sid is a required property for GetAuthTokenRequest and cannot be null");
            }
            this.Sid = sid;
        }

        /// <summary>
        /// The email of the user
        /// </summary>
        /// <value>The email of the user</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// The password of the user
        /// </summary>
        /// <value>The password of the user</value>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// The fusion session id of the user
        /// </summary>
        /// <value>The fusion session id of the user</value>
        /// <example>1234567890ABCDEFG</example>
        [DataMember(Name = "sid", IsRequired = true, EmitDefaultValue = true)]
        public string Sid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAuthTokenRequest {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Sid: ").Append(Sid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
