/*
 * ODIN Fleet API
 *
 * API to access Odin Fleet, empowering developers to deploy gameservers all around the world in just a few lines of code.
 *
 * The version of the OpenAPI document: 0.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = OdinFleet.Client.FileParameter;
using OpenAPIDateConverter = OdinFleet.Client.OpenAPIDateConverter;

namespace OdinFleet.Model
{
    /// <summary>
    /// Server
    /// </summary>
    [DataContract(Name = "Server")]
    public partial class Server : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Server" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Server() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Server" /> class.
        /// </summary>
        /// <param name="id">The ID of the service (required).</param>
        /// <param name="appLocationSettingId">The ID of the location setting (required).</param>
        /// <param name="instance">The ID of the instance (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="addr">The IP address of the node (required).</param>
        /// <param name="createdAt">When the service was created (required).</param>
        /// <param name="updatedAt">When the service was last updated (required).</param>
        /// <param name="location">The location of the node (required).</param>
        /// <param name="env">The environment variables of the service (required).</param>
        /// <param name="ports">The port definitions of the service (required).</param>
        /// <param name="restartPolicy">The restart policy of the service (required).</param>
        /// <param name="resources">The resource allocations of the service (required).</param>
        /// <param name="status">The status of the task (required).</param>
        /// <param name="serverConfig">The server configuration (required).</param>
        /// <param name="backup">The last backup of the service.</param>
        public Server(int id = default(int), int appLocationSettingId = default(int), int instance = default(int), string name = default(string), string addr = default(string), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), Location location = default(Location), Dictionary<string, EnvironmentVariable> env = default(Dictionary<string, EnvironmentVariable>), Dictionary<string, Port> ports = default(Dictionary<string, Port>), RestartPolicy restartPolicy = default(RestartPolicy), ResourceAllocations resources = default(ResourceAllocations), DockerTaskStatus status = default(DockerTaskStatus), ServerConfig serverConfig = default(ServerConfig), Backup backup = default(Backup))
        {
            this.Id = id;
            this.AppLocationSettingId = appLocationSettingId;
            this.Instance = instance;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Server and cannot be null");
            }
            this.Name = name;
            // to ensure "addr" is required (not null)
            if (addr == null)
            {
                throw new ArgumentNullException("addr is a required property for Server and cannot be null");
            }
            this.Addr = addr;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            // to ensure "location" is required (not null)
            if (location == null)
            {
                throw new ArgumentNullException("location is a required property for Server and cannot be null");
            }
            this.Location = location;
            // to ensure "env" is required (not null)
            if (env == null)
            {
                throw new ArgumentNullException("env is a required property for Server and cannot be null");
            }
            this.Env = env;
            // to ensure "ports" is required (not null)
            if (ports == null)
            {
                throw new ArgumentNullException("ports is a required property for Server and cannot be null");
            }
            this.Ports = ports;
            // to ensure "restartPolicy" is required (not null)
            if (restartPolicy == null)
            {
                throw new ArgumentNullException("restartPolicy is a required property for Server and cannot be null");
            }
            this.RestartPolicy = restartPolicy;
            // to ensure "resources" is required (not null)
            if (resources == null)
            {
                throw new ArgumentNullException("resources is a required property for Server and cannot be null");
            }
            this.Resources = resources;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for Server and cannot be null");
            }
            this.Status = status;
            // to ensure "serverConfig" is required (not null)
            if (serverConfig == null)
            {
                throw new ArgumentNullException("serverConfig is a required property for Server and cannot be null");
            }
            this.ServerConfig = serverConfig;
            this.Backup = backup;
        }

        /// <summary>
        /// The ID of the service
        /// </summary>
        /// <value>The ID of the service</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// The ID of the location setting
        /// </summary>
        /// <value>The ID of the location setting</value>
        [DataMember(Name = "appLocationSettingId", IsRequired = true, EmitDefaultValue = true)]
        public int AppLocationSettingId { get; set; }

        /// <summary>
        /// The ID of the instance
        /// </summary>
        /// <value>The ID of the instance</value>
        [DataMember(Name = "instance", IsRequired = true, EmitDefaultValue = true)]
        public int Instance { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The IP address of the node
        /// </summary>
        /// <value>The IP address of the node</value>
        [DataMember(Name = "addr", IsRequired = true, EmitDefaultValue = true)]
        public string Addr { get; set; }

        /// <summary>
        /// When the service was created
        /// </summary>
        /// <value>When the service was created</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// When the service was last updated
        /// </summary>
        /// <value>When the service was last updated</value>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// The location of the node
        /// </summary>
        /// <value>The location of the node</value>
        [DataMember(Name = "location", IsRequired = true, EmitDefaultValue = true)]
        public Location Location { get; set; }

        /// <summary>
        /// The environment variables of the service
        /// </summary>
        /// <value>The environment variables of the service</value>
        [DataMember(Name = "env", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, EnvironmentVariable> Env { get; set; }

        /// <summary>
        /// The port definitions of the service
        /// </summary>
        /// <value>The port definitions of the service</value>
        [DataMember(Name = "ports", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Port> Ports { get; set; }

        /// <summary>
        /// The restart policy of the service
        /// </summary>
        /// <value>The restart policy of the service</value>
        [DataMember(Name = "restartPolicy", IsRequired = true, EmitDefaultValue = true)]
        public RestartPolicy RestartPolicy { get; set; }

        /// <summary>
        /// The resource allocations of the service
        /// </summary>
        /// <value>The resource allocations of the service</value>
        [DataMember(Name = "resources", IsRequired = true, EmitDefaultValue = true)]
        public ResourceAllocations Resources { get; set; }

        /// <summary>
        /// The status of the task
        /// </summary>
        /// <value>The status of the task</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public DockerTaskStatus Status { get; set; }

        /// <summary>
        /// The server configuration
        /// </summary>
        /// <value>The server configuration</value>
        [DataMember(Name = "serverConfig", IsRequired = true, EmitDefaultValue = true)]
        public ServerConfig ServerConfig { get; set; }

        /// <summary>
        /// The last backup of the service
        /// </summary>
        /// <value>The last backup of the service</value>
        [DataMember(Name = "backup", EmitDefaultValue = false)]
        public Backup Backup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Server {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AppLocationSettingId: ").Append(AppLocationSettingId).Append("\n");
            sb.Append("  Instance: ").Append(Instance).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Addr: ").Append(Addr).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Env: ").Append(Env).Append("\n");
            sb.Append("  Ports: ").Append(Ports).Append("\n");
            sb.Append("  RestartPolicy: ").Append(RestartPolicy).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ServerConfig: ").Append(ServerConfig).Append("\n");
            sb.Append("  Backup: ").Append(Backup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
