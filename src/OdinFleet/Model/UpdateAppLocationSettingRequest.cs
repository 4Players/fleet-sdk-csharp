/*
 * ODIN Fleet API
 *
 * API to access Odin Fleet, empowering developers to deploy gameservers all around the world in just a few lines of code.
 *
 * The version of the OpenAPI document: 0.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = OdinFleet.Client.FileParameter;
using OpenAPIDateConverter = OdinFleet.Client.OpenAPIDateConverter;

namespace OdinFleet.Model
{
    /// <summary>
    /// UpdateAppLocationSettingRequest
    /// </summary>
    [DataContract(Name = "updateAppLocationSetting_request")]
    public partial class UpdateAppLocationSettingRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAppLocationSettingRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateAppLocationSettingRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAppLocationSettingRequest" /> class.
        /// </summary>
        /// <param name="name">The name of the location setting (required).</param>
        /// <param name="serverConfigId">The id of the server configuration that should be deployed (required).</param>
        /// <param name="autoScalerEnabled">Whether auto scaler is enabled (required).</param>
        /// <param name="autoScalerMin">The minimum number of instances that should run at the specific location.</param>
        /// <param name="autoScalerMax">The maximum number of instances that should run at the specific location.</param>
        /// <param name="numInstances">The number of instances that should run at the specific location (required).</param>
        /// <param name="placement">The placement settings that define the location and other constraints.</param>
        public UpdateAppLocationSettingRequest(string name = default(string), int serverConfigId = default(int), bool autoScalerEnabled = default(bool), int autoScalerMin = default(int), int autoScalerMax = default(int), int numInstances = default(int), Placement placement = default(Placement))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UpdateAppLocationSettingRequest and cannot be null");
            }
            this.Name = name;
            this.ServerConfigId = serverConfigId;
            this.AutoScalerEnabled = autoScalerEnabled;
            this.NumInstances = numInstances;
            this.AutoScalerMin = autoScalerMin;
            this.AutoScalerMax = autoScalerMax;
            this.Placement = placement;
        }

        /// <summary>
        /// The name of the location setting
        /// </summary>
        /// <value>The name of the location setting</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The id of the server configuration that should be deployed
        /// </summary>
        /// <value>The id of the server configuration that should be deployed</value>
        [DataMember(Name = "serverConfigId", IsRequired = true, EmitDefaultValue = true)]
        public int ServerConfigId { get; set; }

        /// <summary>
        /// Whether auto scaler is enabled
        /// </summary>
        /// <value>Whether auto scaler is enabled</value>
        [DataMember(Name = "autoScalerEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool AutoScalerEnabled { get; set; }

        /// <summary>
        /// The minimum number of instances that should run at the specific location
        /// </summary>
        /// <value>The minimum number of instances that should run at the specific location</value>
        [DataMember(Name = "autoScalerMin", EmitDefaultValue = false)]
        public int AutoScalerMin { get; set; }

        /// <summary>
        /// The maximum number of instances that should run at the specific location
        /// </summary>
        /// <value>The maximum number of instances that should run at the specific location</value>
        [DataMember(Name = "autoScalerMax", EmitDefaultValue = false)]
        public int AutoScalerMax { get; set; }

        /// <summary>
        /// The number of instances that should run at the specific location
        /// </summary>
        /// <value>The number of instances that should run at the specific location</value>
        [DataMember(Name = "numInstances", IsRequired = true, EmitDefaultValue = true)]
        public int NumInstances { get; set; }

        /// <summary>
        /// The placement settings that define the location and other constraints
        /// </summary>
        /// <value>The placement settings that define the location and other constraints</value>
        [DataMember(Name = "placement", EmitDefaultValue = false)]
        public Placement Placement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateAppLocationSettingRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ServerConfigId: ").Append(ServerConfigId).Append("\n");
            sb.Append("  AutoScalerEnabled: ").Append(AutoScalerEnabled).Append("\n");
            sb.Append("  AutoScalerMin: ").Append(AutoScalerMin).Append("\n");
            sb.Append("  AutoScalerMax: ").Append(AutoScalerMax).Append("\n");
            sb.Append("  NumInstances: ").Append(NumInstances).Append("\n");
            sb.Append("  Placement: ").Append(Placement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AutoScalerMin (int) minimum
            if (this.AutoScalerMin < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AutoScalerMin, must be a value greater than or equal to 0.", new [] { "AutoScalerMin" });
            }

            // NumInstances (int) minimum
            if (this.NumInstances < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumInstances, must be a value greater than or equal to 1.", new [] { "NumInstances" });
            }

            yield break;
        }
    }

}
